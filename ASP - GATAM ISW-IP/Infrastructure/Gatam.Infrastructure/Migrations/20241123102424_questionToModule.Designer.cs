// <auto-generated />
using System;
using Gatam.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gatam.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241123102424_questionToModule")]
    partial class questionToModule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gatam.Domain.ApplicationModule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = "b8bcbe58-226e-4142-a8e5-2abfc182cccf",
                            Category = "SollicitatieTraining",
                            CreatedAt = new DateTime(2024, 11, 23, 10, 24, 23, 329, DateTimeKind.Utc).AddTicks(2212),
                            Title = "Solliciteren voor beginners"
                        });
                });

            modelBuilder.Entity("Gatam.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BegeleiderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolesIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "35e8cd4b-2209-47e6-870b-526e5e177976",
                            Email = "admin@app.com",
                            IsActive = false,
                            Name = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0C+lKCQ/iOxeEqGM7IjLiGKkOTZJf7asc+H1CViUWJXQ+O9cFdVYOuP/hiqETGnA==",
                            PhoneNumber = "+32 9966554411",
                            Picture = "png",
                            RolesIds = "[\"rol_3BsJHRFokYkbjr5O\"]",
                            Surname = "Suradmin",
                            Username = "adminSuradmin"
                        },
                        new
                        {
                            Id = "ac90648f-b8f9-4b18-a671-3bb9c081f703",
                            Email = "john.doe@example.com",
                            IsActive = false,
                            Name = "JohnDoe",
                            PasswordHash = "AQAAAAIAAYagAAAAEInst+LraTcuHn9qQSAphwXYEyU9UADquoo5VvzLJJByKESaKYQ7U7ij77DHkdv5rw==",
                            PhoneNumber = "+32 456789166",
                            Picture = "png",
                            RolesIds = "[\"rol_2SgoYL1AoK9tXYXW\"]",
                            Surname = "JOHNDOE",
                            Username = "JohnDoeJOHNDOE"
                        },
                        new
                        {
                            Id = "f06815b1-1295-4e77-bf13-beb124cc49af",
                            Email = "jane.doe@example.com",
                            IsActive = false,
                            Name = "JaneDoe",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjxh0VgpsUuLjSIY1vFyB26q8l/O1e6rzubS9Q9Np+GX0QtDoSejYwybkZ1JVpEDQ==",
                            PhoneNumber = "+32 568779633",
                            Picture = "png",
                            RolesIds = "[\"rol_tj8keS38380ZU4NR\"]",
                            Surname = "JANEDOE",
                            Username = "JaneDoeJANEDOE"
                        },
                        new
                        {
                            Id = "5a489be0-d5c9-4eb0-a0cc-67876bba6506",
                            Email = "lautje.doe@example.com",
                            IsActive = false,
                            Name = "Lautje",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUT+nCz7rTfc5+k2ZvfrekZKm0xyque/4VbLh4j2bQSWtFnE92jzdAR9KEjlBZC2Q==",
                            PhoneNumber = "+23 7896544336",
                            Picture = "png",
                            RolesIds = "[\"rol_tj8keS38380ZU4NR\"]",
                            Surname = "LAUTJE",
                            Username = "LautjeLAUTJE"
                        });
                });

            modelBuilder.Entity("Gatam.Domain.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationModuleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<short>("QuestionType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationModuleId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "d4d48c91-3391-4822-819d-bad61e255c3b",
                            CreatedAt = new DateTime(2024, 11, 23, 10, 24, 23, 330, DateTimeKind.Utc).AddTicks(556),
                            CreatedUserId = "123",
                            LastUpdatedAt = new DateTime(2024, 11, 23, 10, 24, 23, 330, DateTimeKind.Utc).AddTicks(558),
                            LastUpdatedUserId = "123",
                            QuestionTitle = "Wat wil je later bereiken? ",
                            QuestionType = (short)1
                        });
                });

            modelBuilder.Entity("Gatam.Domain.QuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = "dbbc39a6-3326-4ebe-b608-592adac87c06",
                            Answer = "OPEN",
                            QuestionId = "d4d48c91-3391-4822-819d-bad61e255c3b"
                        });
                });

            modelBuilder.Entity("Gatam.Domain.UserModule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserModule");
                });

            modelBuilder.Entity("Gatam.Domain.Question", b =>
                {
                    b.HasOne("Gatam.Domain.ApplicationModule", "ApplicationModule")
                        .WithMany("Questions")
                        .HasForeignKey("ApplicationModuleId");

                    b.Navigation("ApplicationModule");
                });

            modelBuilder.Entity("Gatam.Domain.QuestionAnswer", b =>
                {
                    b.HasOne("Gatam.Domain.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Gatam.Domain.UserModule", b =>
                {
                    b.HasOne("Gatam.Domain.ApplicationModule", "Module")
                        .WithMany("UserModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gatam.Domain.ApplicationUser", "User")
                        .WithMany("UserModules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gatam.Domain.ApplicationModule", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserModules");
                });

            modelBuilder.Entity("Gatam.Domain.ApplicationUser", b =>
                {
                    b.Navigation("UserModules");
                });

            modelBuilder.Entity("Gatam.Domain.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
