@page "/modules-per-gebruiker"
@using System.Diagnostics
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS.DTOS.QuestionsDTO
@inject ApiClient ApiClient
@rendermode InteractiveServer

<link href="css/user-modules.css" rel="stylesheet" />

<h3>Modules per Gebruiker</h3>

@if (_loading)
{
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (_userModules?.Any() != true)
{
    <div class="alert alert-info">
        Geen gebruikers of modules gevonden.
    </div>
}
else
{
    <div class="accordion" id="userModulesAccordion">
        @foreach (var userModule in _userModules)
        {
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                            data-bs-target="#user-@userModule.Id">
                        @userModule.User.Username - @userModule.Module.Title
                    </button>
                </h2>
                <div id="user-@userModule.Id" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="question-list">
                            @foreach (var questionSetting in userModule.QuestionSettings)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h5 class="card-title mb-0">@questionSetting.QuestionTitle</h5>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" 
                                                       type="checkbox" 
                                                       checked="@questionSetting.IsVisible"
                                                       @onchange="async () => await ToggleQuestionVisibility(questionSetting)" />
                                                <label class="form-check-label">Zichtbaar</label>
                                            </div>
                                        </div>
                                        <div class="question-metadata text-muted mt-2">
                                            <small>Type: @GetQuestionTypeText(questionSetting.QuestionType)</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<UserModuleDTO> _userModules;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();
    }

    private async Task LoadUserModules()
    {
        try
        {
            _loading = true;
            _userModules = await ApiClient.GetFromJsonAsync<List<UserModuleDTO>>("api/user/usersWithModules");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user modules: {ex.Message}");
            _userModules = new List<UserModuleDTO>();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ToggleQuestionVisibility(QuestionSettingDTO questionSetting)
    {
        if (questionSetting == null) return;
        
        try
        {
            questionSetting.IsVisible = !questionSetting.IsVisible;
            await ApiClient.PutAsJsonAsync($"api/question/visibility", new
            {
                UserModuleQuestionSettingId = questionSetting.Id,
                IsVisible = questionSetting.IsVisible
            });
        }
        catch (Exception ex)
        {
            questionSetting.IsVisible = !questionSetting.IsVisible;
            Debug.WriteLine($"Error updating visibility: {ex.Message}");
        }
    }

    private string GetQuestionTypeText(int questionType) => questionType switch
    {
        1 => "Open vraag",
        2 => "Multiple choice",
        3 => "Ja/Nee",
        _ => "Onbekend type"
    };
}