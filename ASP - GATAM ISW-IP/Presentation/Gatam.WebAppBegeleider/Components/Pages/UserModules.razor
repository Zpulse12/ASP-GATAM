@page "/modules-per-gebruiker"
@using Gatam.Application.CQRS.DTOS.ModulesDTO
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS.DTOS.QuestionsDTO
@using Gatam.WebAppBegeleider.Extensions.RequestObjects
@using Gatam.WebAppBegeleider.Components.Layout
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireManagementRole")]


<link href="css/user-modules.css" rel="stylesheet" />



@if (_loading)
{
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (_userModules?.Any() != true)
{
    <div class="alert alert-info">
        Geen gebruikers of modules gevonden.
    </div>
}
else
{
<CustomCards>
    <h3 class="mb-4">Modules per Gebruiker</h3>
    <div class="modules-container">
        @foreach (var userModule in _userModules)
        {
            <div class="module-card">
                <div class="module-header" @onclick="() => ToggleModule(userModule.Id)">
                    <div class="user-module-info">
                        <span class="username">@userModule.User.Username</span>
                        <span class="module-title">@userModule.Module.Title</span>

                        @if (userModule.State != UserModuleState.NotStarted)
                        {
                            <Button Class="badge" Color="ButtonColor.Secondary" @onclick="() => NavigateToModule(userModule.Id)"> Klik hier voor meer </Button>
                            <Badge Style="@GetBadgeStyle(userModule)"
                                   Color="BadgeColor.None"
                                   Class="module-badge">
                                @CalculateAnsweredPercentageLabel(userModule)
                            </Badge>
                        }
                    </div>
                    <i class="bi bi-chevron-down ml-4"></i>
                </div>
            </div>



                <div class="module-content @(_expandedModules.Contains(userModule.Id) ? "show" : "")">
                    @foreach (var questionSetting in userModule.UserQuestions)
                    {
                        <div class="question-item">
                            <div class="question-content">
                                <h6>@questionSetting.QuestionTitle</h6>
                                <span class="question-type">@GetQuestionTypeText(questionSetting.QuestionType)</span>
                            </div>
                            <div class="priority-spacing mr-5">
                                <span class="toggle-label">Prioriteit</span>
                                <div class="priority-flex">
                                    <InputSelect @bind-Value="questionSetting.QuestionPriority" class="form-control mb-3">
                                        <option value="@QuestionPriority.HIGH">Hoog</option>
                                        <option value="@QuestionPriority.MEDIUM">Gemiddeld</option>
                                        <option value="@QuestionPriority.LOW">Laag</option>
                                    </InputSelect>
                                    <Button Color="ButtonColor.Primary" @onclick="async () => await UpdateQuestionPriority(questionSetting) ">Prioriteit opslaan</Button>
                                </div>
                            </div>
                            <div class="visibility-toggle">
                                
                                    <label class="switch">
                                        <input type="checkbox"
                                               checked="@questionSetting.IsVisible"
                                               @onchange="async () => await ToggleQuestionVisibility(questionSetting)" />
                                        <span class="slider"></span>
                                    </label>
                                <span class="toggle-label">@(questionSetting.IsVisible ? "Zichtbaar" : "Verborgen")</span>
                            </div>
                        </div>
                    }
                </div>
        }
    </div>
    </CustomCards>

}
@code {
    private List<UserModuleDTO> _userModules;
    private bool _loading = true;
    private HashSet<string> _expandedModules = new();

    [Inject] protected ToastService toastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();
    }

    private async Task LoadUserModules()
    {
        try
        {
            _loading = true;
            _userModules = await ApiClient.GetFromJsonAsync<List<UserModuleDTO>>("api/user/usersWithModules");
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het ophalen van de gebruikers modules.", ex.Message));
            _userModules = new List<UserModuleDTO>();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ToggleQuestionVisibility(UserQuestionDTO userQuestion)
    {
        if (userQuestion == null) return;

        try
        {
            userQuestion.IsVisible = !userQuestion.IsVisible;
            await ApiClient.PutAsync($"api/question/visibility?userQuestionId={userQuestion.Id}&isVisible={userQuestion.IsVisible}");
        }
        catch (Exception ex)
        {
            userQuestion.IsVisible = !userQuestion.IsVisible;
            toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanpassen van de zichtbaar.", ex.Message));
        }
    }
    private async Task UpdateQuestionPriority(UserQuestionDTO userQuestion)
    {
        if (userQuestion == null) return;
        if (!Enum.IsDefined(typeof(QuestionPriority), userQuestion.QuestionPriority))
        {
            toastService.Notify(new(ToastType.Warning, "Ongeldige prioriteit opgegeven"));
            return;
        }
        try
        {
            await ApiClient.PatchAsJsonAsync<UpdateQuestionPriorityRequestObject>($"api/question/{userQuestion.Id}/priority", new UpdateQuestionPriorityRequestObject() { QuestionPriority = userQuestion.QuestionPriority });
            toastService.Notify(new(ToastType.Success, "Prioriteit succesvol aangepast"));
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanpassen van de prioriteit", ex.Message));
        }
    }

    private string GetQuestionTypeText(int questionType) => questionType switch
    {
        0 => "Meerkeuze",
        1 => "Open vraag",
        2 => "Waar/Onwaar",
        3 => "Keuzelijst",
        _ => "Onbekend type"
    };

    private void ToggleModule(string moduleId)
    {
        if (_expandedModules.Contains(moduleId))
            _expandedModules.Remove(moduleId);
        else
            _expandedModules.Add(moduleId);
    }
    public double CalculateAnsweredPercentage(UserModuleDTO userModule)
    {
        var visibleQuestions = userModule.UserQuestions.Where(q => q.IsVisible).ToList();
        int answeredQuestionsCount = 0;

        foreach (var question in visibleQuestions)
        {
            bool isAnswered = false; 
            foreach (var answer in question.Question.Answers)
            {
                if (isAnswered)
                    break; 

                var matchingAnswer = userModule.UserGivenAnswers
                    .FirstOrDefault(uga => uga.QuestionAnswerId == answer.Id && !string.IsNullOrEmpty(uga.GivenAnswer));

                if (matchingAnswer != null)
                {
                    isAnswered = true; 
                    answeredQuestionsCount++; 
                }
            }
        }
        if (visibleQuestions.Count == 0)
            return 0; 

            return (double)answeredQuestionsCount / visibleQuestions.Count * 100;
    }

    public string CalculateAnsweredPercentageLabel(UserModuleDTO userModule)
    {
        var percentage = CalculateAnsweredPercentage(userModule);
        return $"{percentage:0.##}%";
    }
    private string GetBadgeColor(UserModuleDTO userModule)
    {
        var percentage = CalculateAnsweredPercentage(userModule);

        if (percentage >= 80) return "#28a745"; // Groen (succes)
        if (percentage >= 50) return "#ffc107"; // Geel (waarschuwing)
        return "#dc3545"; // Rood (fout)
    }
    private string GetBadgeStyle(UserModuleDTO userModule)
    {
        var badgeColor = GetBadgeColor(userModule);
        return $"margin-right: 10px; width: 60px; background-color: {badgeColor};";
    }

    private void NavigateToModule(string userModuleId)
    {
        NavigationManager.NavigateTo($"/modules-per-gebruiker/{userModuleId}");
    }


}

