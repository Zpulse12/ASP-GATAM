@page "/modules-per-gebruiker"
@using System.Diagnostics
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS.DTOS.QuestionsDTO
@inject ApiClient ApiClient
@rendermode InteractiveServer


<h3>Modules per Gebruiker</h3>

@if (_loading)
{
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (_userModules == null || !_userModules.Any())
{
    <div class="alert alert-info">
        Geen gebruikers of modules gevonden.
    </div>
}
else
{
    @foreach (var userModule in _userModules)
    {
        @if (userModule?.User != null)
        {
            <div class="user-section mb-4">
                <h4 class="user-title">@userModule.User.Username</h4>
                @if (userModule.Module != null)
                {
                    <div class="module-section">
                        <h5 class="module-title">@userModule.Module.Title</h5>
                        
                        @if (userModule.QuestionSettings != null)
                        {
                            <div class="question-list">
                                @foreach (var questionSetting in userModule.QuestionSettings)
                                {
                                    @if (questionSetting?.Question != null)
                                    {
                                        <div class="card mb-3">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <h5 class="card-title mb-0">@questionSetting.Question.QuestionTitle</h5>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" 
                                                               type="checkbox" 
                                                               checked="@questionSetting.IsVisible"
                                                               @onchange="async () => await ToggleQuestionVisibility(questionSetting)" />
                                                        <label class="form-check-label">Zichtbaar</label>
                                                    </div>
                                                </div>
                                                
                                                <div class="question-metadata text-muted mt-2">
                                                    <small>
                                                        Type: @GetQuestionTypeText(questionSetting.Question.QuestionType)
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
}

@code {
    private List<UserModuleDTO> _userModules;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();
    }

    private async Task LoadUserModules()
    {
        try
        {
            _loading = true;
            _userModules = await ApiClient.GetFromJsonAsync<List<UserModuleDTO>>("api/user/usersWithModules");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user modules: {ex.Message}");
            _userModules = new List<UserModuleDTO>();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ToggleQuestionVisibility(QuestionSettingDTO questionSetting)
    {
        if (questionSetting == null) return;
        
        try
        {
            questionSetting.IsVisible = !questionSetting.IsVisible;
            await ApiClient.PutAsJsonAsync($"api/question/visibility", new
            {
                UserModuleQuestionSettingId = questionSetting.Id,
                IsVisible = questionSetting.IsVisible
            });
        }
        catch (Exception ex)
        {
            questionSetting.IsVisible = !questionSetting.IsVisible;
            Debug.WriteLine($"Error updating visibility: {ex.Message}");
        }
    }

    private string GetQuestionTypeText(int questionType) => questionType switch
    {
        1 => "Open vraag",
        2 => "Multiple choice",
        3 => "Ja/Nee",
        _ => "Onbekend type"
    };
}
<style>
    .module-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 30px;
    }

    .module-title {
        color: #2c3e50;
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    .question-list {
        max-width: 800px;
        margin: 0 auto;
    }

    .card { 
        transition: transform 0.2s;
        border-radius: 8px;
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .form-switch {
        padding-left: 2.5em;
    }

    .form-check-input {
        cursor: pointer;
    }
</style> 