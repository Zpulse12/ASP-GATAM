@page "/content/modules/{Id}"
@using Gatam.Application.CQRS.DTOS.ModulesDTO
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using System.Diagnostics
@using System.Text.Json

@inject ApiClient apiclient
@inject AuthenticationStateProvider authenticationStateProvider

@rendermode InteractiveServer

@attribute [Authorize(Policy = "RequireMakerRole")]
<CustomCards>
     @if (moduleBeingEdited != null)
    {
        <h3>Module bewerken !</h3>

        <div class="mb-3">
            <label for="title">Titel</label>
            <InputText id="title" class="form-control" @bind-Value="moduleBeingEdited.Title" />
        </div>

        <div class="mb-3">
            <label for="category">Categorie</label>
            <InputText id="category" class="form-control" @bind-Value="moduleBeingEdited.Category" />
        </div>

        <hr />

        <button class="btn" style="background-color:#4454D2; color:white" @onclick="SaveModule">Module Opslaan</button>
        <hr />
        <h3>Vragen voor module:</h3>
        <hr/>
        @if (questions != null) 
        {
            <Grid TItem="Question"
                  @ref="questionGrid"
                  AllowRowClick="true"
                  AllowSorting="true"
                  Class="table table-hover"
                  AllowPaging="true"
                  Data="questions"
                  PageSize="10"
                  HeaderRowCssClass="custom-header"
                  Responsive="true">
                <GridColumns>
                    <GridColumn TItem="Question" HeaderText="Vraag:" PropertyName="QuestionTitle" SortString="QuestionTitle" SortKeySelector="item => item.QuestionTitle">
                        @context.QuestionTitle
                    </GridColumn>
                    <GridColumn TItem="Question" HeaderText="Type:" PropertyName="QuestionType" SortString="QuestionType" SortKeySelector="item => item.QuestionType">
                        @((QuestionType)@context.QuestionType)
                    </GridColumn>
                    <GridColumn TItem="Question" HeaderText="Aangemaakt op:" PropertyName="CreatedAt" SortString="QuestionTitle" SortKeySelector="item => item.CreatedAt">
                        <Tooltip Class="me-4" Title="@context.CreatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.CreatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
                    </GridColumn>
                    <GridColumn TItem="Question" HeaderText="Aangepast op:" PropertyName="LastUpdatedAt" SortString="QuestionTitle" SortKeySelector="item => item.LastUpdatedAt">
                        <Tooltip Class="me-4" Title="@context.LastUpdatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.LastUpdatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
                    </GridColumn>

                    <GridColumn TItem="Question" HeaderText="Actie" Filterable="false">
                        <div>
                            <button type="button"
                                    class="btn btn-outline-danger"
                                    data-toggle="modal" data-target="#exampleModal" @onclick:stopPropagation>
                                <i class="bi bi-trash"></i>
                            </button>
                            <a class="btn btn-outline-secondary" href="/question/@(context.Id)" @onclick:stopPropagation>
                                <i class="bi bi-pencil"></i>
                            </a>
                        </div>
                    </GridColumn>
                </GridColumns>
            </Grid>
        }
        else{
            <div class="alert alert-danger">
                vraag niet gevonden.
            </div>
        }
        
    }
    else
    {
        <div class="alert alert-danger">
            Module niet gevonden.
        </div>
    }
</CustomCards>


@code {
    private Modal? modal;
    [Parameter] public string Id { get; set; } = "";
    private ModuleDTO moduleBeingEdited;


    private Question questionBeingEdited;
    private QuestionAnswer answerBeingEdited;
    private List<QuestionAnswer> answers = new List<QuestionAnswer>();
    private Grid<QuestionAnswer> answerGrid = new Grid<QuestionAnswer>();
    private Question newQuestion = new Question();
    [Inject] protected ToastService toastService { get; set; } = default!;
    private QuestionType selectedOption = QuestionType.OPEN;
    private EditContext editContext;

    private List<Question> questions = new List<Question>();
    private Grid<Question> questionGrid = new Grid<Question>();
    private QuestionAnswer currentAnswer = new QuestionAnswer();

    private bool _hasError = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            moduleBeingEdited = await apiclient.GetFromJsonAsync<ModuleDTO>($"/api/module/{Id}");

            if (moduleBeingEdited != null && moduleBeingEdited.Questions?.Any() == true)
            {

                questions = moduleBeingEdited.Questions.ToList();

            }
            else
            {
                Debug.WriteLine("Geen vragen gevonden.");
                toastService.Notify(new(ToastType.Warning, "Geen vragen gevonden in deze module."));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Fout bij ophalen module: {ex.Message}");
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het ophalen van de module."));
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveModule()
    {
        try
        {
            if (moduleBeingEdited == null)
            {
                toastService.Notify(new(ToastType.Warning, "Modulegegevens zijn leeg."));
                return;
            }

            var updatedModule = new ModuleDTO
                {
                    Id = moduleBeingEdited.Id,  
                    Title = moduleBeingEdited.Title,
                    Category = moduleBeingEdited.Category,
                    Questions = moduleBeingEdited.Questions
                };

            await apiclient.PutAsJsonAsync($"/api/module/{moduleBeingEdited.Id}", updatedModule);

            toastService.Notify(new(ToastType.Success, "Module succesvol opgeslagen!"));
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Fout bij opslaan module: {ex.Message}");
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het opslaan van de module."));
        }
    }


    public async Task HandleValidSubmit()
    {
        isLoading = true;
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        newQuestion.QuestionType = (short)selectedOption;
        if ((QuestionType)newQuestion.QuestionType == QuestionType.TRUE_OR_FALSE)
        {
            answers.Add(currentAnswer);
        }
        if ((QuestionType)newQuestion.QuestionType == QuestionType.OPEN)
        {
            answers.Add(currentAnswer);
        }
        newQuestion.Answers = answers;


        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            string userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            newQuestion.CreatedUserId = userId;
            newQuestion.LastUpdatedUserId = userId;
            try
            {
                newQuestion.ApplicationModuleId = moduleBeingEdited.Id;
                questions.Add(newQuestion);
                toastService.Notify(new(ToastType.Success, "Vraag toegevoegd aan de module!", "Vraag is lokaal opgeslagen."));
                ResetForm();

            }
            catch (Exception e)
            {
                toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van je vraag.", e.Message));
            }
            finally
            {
                Thread.Sleep(200);
                isLoading = false;
                UpdateTable();
            }
        }
        else
        {
            isLoading = false;
            toastService.Notify(new(ToastType.Danger, "Geen gebruiker gevonden in de huidige context. Ben je ingelogd?", "Geen gebruiker id gevonden."));
            return;
        }
    }

    private async Task RemoveQuestion(Question question)
    {
        if (question == null)
            return;

        questions.Remove(question);

        await questionGrid.RefreshDataAsync();

        toastService.Notify(new(ToastType.Success, $"De vraag '{question.QuestionTitle}' is succesvol verwijderd."));
    }

    private async void AddAnswerToList()
    {
        if (string.IsNullOrWhiteSpace(answerBeingEdited.Answer))
        {
            toastService.Notify(new(ToastType.Warning, "Antwoord mag niet leeg zijn"));
            return;
        }
        answers.Add(new QuestionAnswer() { Answer = answerBeingEdited.Answer, AnswerValue = answerBeingEdited.AnswerValue, QuestionId = newQuestion.Id });
        await answerGrid.RefreshDataAsync();
        answerBeingEdited = new QuestionAnswer() { AnswerValue = "true" };
    }
    private async void RemoveAnswerFromList(QuestionAnswer answer)
    {
        answers.Remove(answer);
        await answerGrid.RefreshDataAsync();
    }

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async void UpdateTable()
    {
        questionGrid.Data = questions;
        questionGrid.RefreshDataAsync();
    }


    private void ResetForm()
    {
        newQuestion = new Question();
        answers.Clear();
        answers.Append(new QuestionAnswer() { Answer = "OPEN", QuestionId = newQuestion.Id });
        editContext = new EditContext(questionBeingEdited);
        selectedOption = QuestionType.OPEN;
    }

}
