@page "/modules-per-gebruiker/{CurrentUserModuleId:guid}"
@using System.Diagnostics
@using Gatam.Application.CQRS.DTOS.ModulesDTO
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS.DTOS.QuestionsDTO
@inject ApiClient ApiClient
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Policy = "RequireManagementRole")]

<div class="container">
    @if (_hasError)
    {
        <p>Oops, er liep iets mis</p>
    }
    else if (userModule?.Module != null)
    {
       
        <h3 class="mt-4">@userModule.Module.Title</h3>
        <p>@userModule.Module.Category</p>

        @if (userModule.UserQuestions != null && userModule.UserQuestions.Any())
        {
            @foreach (var question in userModule.UserQuestions.Where(x => x.IsVisible))
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <p style="font-size: 0.8em; color: gray;">Vraag:</p>
                        <h5 class="card-title">@question.QuestionTitle</h5>
                        @if ((short)question.QuestionType == (short)QuestionType.MULTIPLE_CHOICE)
                        {
                            <div class="form-check-group">
                                @foreach (var answer in question.Question.Answers)
                                {
                                    var userAnswer = userModule.UserGivenAnswers?.FirstOrDefault(x => x.QuestionAnswerId == answer.Id);
                                    <div class="form-check">
                                        <input disabled type="checkbox" class="form-check-input" checked="@( userAnswer.GivenAnswer == answer.Answer)">
                                        <label class="form-check-label" for="answer-@answer.Id">
                                            @answer.Answer
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                        else if ((short)question.QuestionType == (short)QuestionType.OPEN)
                        {
                            @foreach (var answer in question.Question.Answers)
                            {
                                <div class="form-group mt-3">

                                    <label for="open-answer-@question.Id">Uw antwoord:</label>
                                    <textarea disabled class="form-control"
                                              id="open-answer-@question.Id" rows="4">@userModule.UserGivenAnswers?.FirstOrDefault(x => x.QuestionAnswerId == question.Question.Answers.First().Id)?.GivenAnswer</textarea>
                                </div>
                            }
                        }
                        else if ((short)question.QuestionType == (short)QuestionType.TRUE_OR_FALSE)
                        {
                            <div class="form-check-group">
                                @foreach (var answer in question.Question.Answers)
                                {
                                    var userAnswer = userModule.UserGivenAnswers?.FirstOrDefault(x => x.QuestionAnswerId == answer.Id);
                                    <div class="form-check">
                                        <input disabled class="form-check-input" type="radio" name="truefalse-@question.Id"  value="@answer.Answer" id="answer-@answer.Id"
                                               checked="@(!string.IsNullOrEmpty(userAnswer?.GivenAnswer) && userAnswer.GivenAnswer == answer.Answer)">
                                        <label class="form-check-label" for="answer-@answer.Id">
                                            @answer.Answer
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="form-group mt-3">
                                <label for="select-answer-@question.Id">Kies een optie:</label>
                                <select disabled class="form-select"  id="select-answer-@question.Id"
                                        value="@userModule.UserGivenAnswers?.FirstOrDefault(x => x.QuestionAnswerId == question.Question.Answers.FirstOrDefault(a => a.Id == x.QuestionAnswerId)?.Id)?.GivenAnswer">
                                    <option value="">Kies een antwoord</option>
                                    @foreach (var answer in question.Question.Answers)
                                    {
                                        <option value="@answer.Answer"
                                                selected="@userModule.UserGivenAnswers?.FirstOrDefault(x => x.GivenAnswer == answer.Answer)">
                                            @answer.Answer
                                        </option>
                                    }
                                </select>
                            </div>

                        }
                    </div>
                </div>

            }
        }

        else
        {
            <p>Oops er zijn nog geen vragen beschikbaar voor deze module. <a onclick="Back">Druk hier om terug te gaan</a></p>
        }
        <button class="btn btn-primary" @onclick="Back">
            <Icon Name="IconName.ArrowLeft"></Icon> Terug
        </button>
    }
    else
    {
        <p>Modulegegevens niet beschikbaar.</p>
    }



</div>

@code {

    [Parameter]
    public Guid CurrentUserModuleId { get; set; }
    private UserModuleDTO userModule = new UserModuleDTO();
    private bool _isLoading = true;
    private bool _hasError = false;
    private bool isAnswersModalVisible = false;
    private string loggedInUserId;
    [Inject] protected ToastService toastService { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {

        userModule = await ApiClient.GetFromJsonAsync<UserModuleDTO>($"api/usermodule/{CurrentUserModuleId}");

    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadQuestions();
    }

    private async Task LoadQuestions()
    {
        _isLoading = true;
        try
        {
            userModule = await ApiClient.GetFromJsonAsync<UserModuleDTO>($"api/usermodule/{CurrentUserModuleId}");
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;
        }
        catch (Exception ex)
        {
            _hasError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo($"/modules-per-gebruiker");
    }
}