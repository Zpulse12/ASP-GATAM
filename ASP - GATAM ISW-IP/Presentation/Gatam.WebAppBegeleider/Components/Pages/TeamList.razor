@page "/admin/teams"
@using Gatam.Application.CQRS
@using Gatam.Application.CQRS.InvitationTeam
@using Gatam.Domain
@using System.Diagnostics
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@inject ApiClient apiClient
@rendermode InteractiveServer
@using BlazorBootstrap;
<CustomCards>
<h3>Teams</h3>
@if (isLoading)
{
    <p>Loading...</p>
}
else if (hasError)
{
    <p>Er is een fout opgetreden bij het ophalen van de teams.</p>
}
else if (teams == null || teams.Count == 0)
{
    <p>Geen teams gevonden.</p>
}
else
{
        @foreach (var team in teams)
        {
            var teamId = team.Id; // Gebruik het team-ID om unieke id's te genereren voor tabs en inhoud

            <div class="team-card border rounded p-3 mb-4">
                <h4>@team.TeamName.ToUpper()</h4>
                <p>Aangemaakt door: @team.TeamCreator.UserName</p>
                <ul class="nav nav-tabs" id="myTab-@teamId" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="acceptedTeamInvite-tab-@teamId" data-bs-toggle="tab" data-bs-target="#acceptedTeamInvite-@teamId" type="button" role="tab" aria-controls="acceptedTeamInvite-@teamId" aria-selected="true">
                            Mijn team
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="pendingTeamInvite-tab-@teamId" data-bs-toggle="tab" data-bs-target="#pendingTeamInvite-@teamId" type="button" role="tab" aria-controls="pendingTeamInvite-@teamId" aria-selected="false">
                            In Afwachting <span class="badge" style="background-color:grey">@team.TeamInvitations.Count(invitation => !invitation.isAccepted)</span>
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="settingTeams-tab-@teamId" data-bs-toggle="tab" data-bs-target="#settingTeams-@teamId" type="button" role="tab" aria-controls="settingTeams-@teamId" aria-selected="false">
                            Instellingen
                        </button>
                    </li>
                </ul>

                <div class="tab-content" id="myTabContent-@teamId">
                    <div class="tab-pane fade show active" id="acceptedTeamInvite-@teamId" role="tabpanel" aria-labelledby="acceptedTeamInvite-tab-@teamId">
                        @if (team.TeamInvitations == null || !team.TeamInvitations.Any())
                        {
                            <p>Dit team heeft nog geen studenten.</p>
                        }
                        else
                        {
                            <h5 style="color:black;">Geaccepteerde studenten</h5>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Gebruikersnaam</th>
                                        <th>Emailadres</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var invitation in team.TeamInvitations)
                                    {
                                        @if (invitation.isAccepted)
                                        {
                                            <tr>
                                                <td>@invitation.applicationUser.UserName</td>
                                                <td>@invitation.applicationUser.Email</td>
                                                <td></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    </div>

                    <div class="tab-pane fade" id="pendingTeamInvite-@teamId" role="tabpanel" aria-labelledby="pendingTeamInvite-tab-@teamId">
                        @if (team.TeamInvitations == null || !team.TeamInvitations.Any())
                        {
                            <p>Dit team heeft nog geen studenten.</p>
                        }
                        else
                        {
                            <h5 style="color: black">Studenten in afwachting</h5>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Gebruikersnaam</th>
                                        <th>Emailadres</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (@team.TeamInvitations.Count(invitation => !invitation.isAccepted) == 0)
                                    {
                                        <p>Geen studenten in afwachting.</p>
                                    }
                                    else{
                                    @foreach (var invitation in team.TeamInvitations)
                                    {
                                       
                                        @if (!invitation.isAccepted)
                                        {
                                            <tr>
                                                <td>@invitation.applicationUser.UserName</td>
                                                <td>@invitation.applicationUser.Email</td>
                                                <td>
                                                    <button class="btn" style="background-color: #4454D2; color:white; font-weight:bold" @onclick="() => ToggleInvitationStatus(invitation,invitation.Id, true)">
                                                        Student toevoegen
                                                    </button>
                                                        <button type="button" @onclick="() => ShowDeleteModal(invitation.Id)" class="btn btn-outline-danger" data-toggle="modal" data-target="#exampleModal">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                </td>
                                            </tr>
                                        }
                                       
                                    }
                                }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="tab-pane fade" id="settingTeams-@teamId" role="tabpanel" aria-labelledby="settingTeams-tab-@teamId">
                        <Accordion>
                            <AccordionItem>
                                <TitleTemplate>
                                    Toevoegen van een student
                                </TitleTemplate>
                                <Content>
                                    <div class="search-container">
                                        <input type="text" style="border-radius:5px; margin-top:15px; border-color:lightblue; box-shadow: none; padding: 10px;" @oninput="(e) => UpdateSearchQuery(teamId, e.Value.ToString())" placeholder="Zoek student op naam of e-mail" />
                                    </div>
                                    @if (!string.IsNullOrEmpty(errorMessage) && showError)
                                    {
                                        <div class="alert alert-danger">
                                            @errorMessage
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(successMessage) && showSuccess)
                                    {
                                        <div class="alert alert-success">
                                            @successMessage
                                        </div>
                                    }

                                    @if (teamFilteredUsers.ContainsKey(teamId) && teamFilteredUsers[teamId].Count > 0)
                                    {

                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>Gebruikersnaam</th>
                                                    <th>Emailadres</th>
                                                    <th>Toevoegen</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var user in teamFilteredUsers[teamId])
                                                {

                                                    <tr>
                                                        <td>@user.UserName</td>
                                                        <td>@user.Email</td>
                                                        <td><button class="btn" style="background-color: #4454D2; color:white; font-weight:bold" @onclick="() => InviteUserToTeam(user.Id, teamId)">Toevoegen</button></td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                    else if (!string.IsNullOrWhiteSpace(searchText))
                                    {
                                        <p>Geen gebruikers gevonden.</p>
                                    }
                                    else
                                    {
                                    }
                                </Content>
                            </AccordionItem>
                            <AccordionItem>
                                <TitleTemplate>
                                    Team bijwerken
                                </TitleTemplate>
                                <Content>
                                   ...
                                </Content>
                            </AccordionItem>
                        </Accordion>


                    </div>
                </div>
            </div>

        }
}
    @if (isModalVisible)
    {
        <div class="modal fade show shadow-sm" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="exampleModalLabel">Bevestig Verwijdering</h4>
                        <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Weet je zeker dat je deze student wilt weigeren in uw team?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-success" @onclick="CloseModal">Annuleer</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Delete">Verwijder</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    
</CustomCards>

@code {
    private string searchText = string.Empty;
    private List<ApplicationTeam> teams = new();
    private List<ApplicationUser> users = new();
    private List<ApplicationUser> filteredUsers = new List<ApplicationUser>();
    private Dictionary<string, List<ApplicationUser>> teamFilteredUsers = new();
    private bool isLoading = true;
    private bool hasError = false;

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showError = false;
    private bool showSuccess = false;

    private bool isModalVisible = false;
    private string selectedInvitationId = " ";

    private void ShowDeleteModal(string invitationId)
    {
        selectedInvitationId = invitationId;
        isModalVisible = true;  
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var teamResponse = await apiClient.GetFromJsonAsync<List<ApplicationTeam>>("api/team");
            var allUsers = await apiClient.GetFromJsonAsync<List<ApplicationUser>>("api/user");

            if (teamResponse != null && teamResponse.Count > 0)
            {
                teams = teamResponse;
                users = allUsers;

            }
            if (!string.IsNullOrEmpty(errorMessage))
            {
                showError = true;
                StartTimer(true);
            }

            if (!string.IsNullOrEmpty(successMessage))
            {
                showSuccess = true;
                StartTimer(false); 
            }
        }
        catch (HttpRequestException ex)
        {
            hasError = true;  // Er is een fout opgetreden bij de aanvraag
            Console.WriteLine($"Aanvraagfout: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private async void StartTimer(bool isError)
    {
        await Task.Delay(5000); // Wacht 5 seconden

        if (isError)
        {
            showError = false;
        }
        else
        {
            showSuccess = false;
        }

        StateHasChanged(); // Update de UI
    }

    private async Task ToggleInvitationStatus(TeamInvitation invitation, string invitationId, bool isAccepted)
    {
        Console.WriteLine("Button clicked. Toggling invitation status...");
        Console.WriteLine($"Invitation ID: {invitation.Id}, Accepted: {isAccepted}");
        invitation.isAccepted = isAccepted;
        try
        {
            var command = new AcceptTeamInvitationCommand()
                {
                    _teaminvitationId = invitation.Id,
                    IsAccepted = isAccepted
                };

            var response = await apiClient.PutAsJsonAsync($"api/invitationteam/acceptInvitation/{invitationId}", command);
            if (response.IsSuccessStatusCode)
            {
                var updatedTeam = await response.Content.ReadFromJsonAsync<ApplicationTeam>();
                if (updatedTeam != null)
                {
                    var invitationRequest = teams
                        .FirstOrDefault(t => t.Id == invitation.ApplicationTeamId)
                        .TeamInvitations.FirstOrDefault(i => i.Id == invitation.Id);

                    if (invitationRequest != null)
                    {
                        invitationRequest.isAccepted = updatedTeam.TeamInvitations.FirstOrDefault(i => i.Id == invitation.Id).isAccepted;
                    }
                    StateHasChanged();
                    var teamResponse = await apiClient.GetFromJsonAsync<List<ApplicationTeam>>("api/team");
                    teams = teamResponse;
                }
            }
            else
            {
                Console.WriteLine($"Error updating user status: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during status update: {ex.Message}");
        }
    }

    private async Task Delete()
    {
        try
        {
            var response = await apiClient.DeleteAsync($"api/invitationteam/delete/{selectedInvitationId}");

            if (response.IsSuccessStatusCode)
            {
                var teamContainingInvitation = teams
                    .FirstOrDefault(t => t.TeamInvitations.Any(inv => inv.Id == selectedInvitationId));

                if (teamContainingInvitation != null)
                {
                    var invitationToRemove = teamContainingInvitation.TeamInvitations
                        .FirstOrDefault(inv => inv.Id == selectedInvitationId);

                    if (invitationToRemove != null)
                    {
                        teamContainingInvitation.TeamInvitations.Remove(invitationToRemove);
                        StateHasChanged(); 
                    }
                }

                isModalVisible = false;
            }
            else
            {
                Debug.WriteLine($"Failed to delete invitation {selectedInvitationId}: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error during deletion: {ex.Message}");
        }
    }

    private void UpdateSearchQuery(string teamId, string searchInput)
    {
        searchText = searchInput;

        if (!teamFilteredUsers.ContainsKey(teamId))
        {
            teamFilteredUsers[teamId] = new List<ApplicationUser>();
        }

        teamFilteredUsers[teamId] = users
            .Where(user => user.UserName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                           user.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private HttpResponseMessage response;
    private TeamInvitationDTO invitation;
    private async Task InviteUserToTeam(string userId, string teamId)
    {
        var user = users.Find(u => u.Id == userId);
        var team = teams.Find(team => team.Id == teamId);
        invitation = new TeamInvitationDTO()
        {
                Id = Guid.NewGuid().ToString(),
                ApplicationTeamId = teamId,
                UserId = userId,
                CreatedAt = DateTime.UtcNow,
                ResponseDateTime = DateTime.UtcNow,
                IsAccepted = true
        };



        response = await apiClient.PostAsJsonAsync("api/invitationteam", invitation);
        if (response.IsSuccessStatusCode)
        {
            var teamResponse = await apiClient.GetFromJsonAsync<List<ApplicationTeam>>("api/team");
            teams = teamResponse;
            showSuccess = true;
            StartTimer(true);
            StateHasChanged();  
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ValidationErrorResponse>();
            if (errorResponse?.Failures != null && errorResponse.Failures.Any())
            {
                errorMessage = string.Join(", ", errorResponse.Failures.Select(f => $"{f.PropertyName}: {f.ErrorMessage}"));
                showError = true;
                StartTimer(true);
            }
            else
            {
                errorMessage = errorResponse?.Message ?? "Er is een onbekende fout opgetreden.";
            }

        }
    }

    public class ValidationErrorResponse
    {
        public string Message { get; set; }
        public List<ValidationFailure> Failures { get; set; }
    }

    public class ValidationFailure
    {
        public string PropertyName { get; set; }
        public string ErrorMessage { get; set; }
    }


} 
