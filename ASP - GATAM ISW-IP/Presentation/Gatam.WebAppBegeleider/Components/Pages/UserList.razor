@page "/admin/userlist"
@using Gatam.Domain
@using Gatam.WebAPI;
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient http;

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="mb-0">Overzicht gebruikers</h2>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="alert alert-info text-center">
                            <div class="spinner-border text-primary me-2" role="status"></div>
                            Loading users... Please wait.
                        </div>
                    }
                    else if (hasError)
                    {
                        <div class="alert alert-danger text-center">
                            <i class="bi bi-exclamation-circle-fill me-2"></i>
                            <strong>Error:</strong> We encountered an issue while fetching the user list.
                        </div>
                    }
                    else
                    {
                        <QuickGrid Items="users.AsQueryable()" class="table table-hover table-bordered">
                            <PropertyColumn Property="@(u => u.UserName)" Title="Gebruikersnaam" Sortable="true" />
                            <PropertyColumn Property="@(u => u.Email)" Title="Email" Sortable="true" />
                            <PropertyColumn Property="@(u => u._role)" Title="Rol" Sortable="true" />
                            <PropertyColumn Property="@(u => u.AccessFailedCount)" Title="Mislukte pogingen" Sortable="true" />
                            <PropertyColumn Property="@(u => u.LockoutEnabled)" Title="Vergrendeld account" Sortable="true" />
                            <PropertyColumn Property="@(u => u.EmailConfirmed)" Title="Email Bevestigt" Sortable="true" />
                        </QuickGrid>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ApplicationUser> users = new();
    private bool isLoading = true;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await http.GetFromJsonAsync<List<ApplicationUser>>("api/User");
            if (response != null && response.Count > 0)
            {
                users = response;
            }
            else
            {
                hasError = true;  // No users found or response is null
            }
        }
        catch (HttpRequestException ex)
        {
            hasError = true;  // A request error occurred
            Console.WriteLine($"Request error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
