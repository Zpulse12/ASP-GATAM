@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.Extensions
@page "/admin/user-list"
@using System.Diagnostics
@using Gatam.Application.CQRS.User
@using Gatam.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@using Gatam.Infrastructure.Repositories
@inject ManagementApiRepository managementApiRepository
@inject ApiClient apiClient


@rendermode InteractiveServer


@attribute [Authorize(Policy = "RequireManagementRole")]

<CustomCards>
    <div class="card-body">
        <div class="card-header">
            <h5>
                Gebruikers overzicht
            </h5>
        </div>
        @if (_isLoading)
        {
        <div class="alert alert-info text-center">
            <div class="spinner-border text-primary me-2" role="status"></div>
            Loading users... Please wait.
        </div>
        }
        else if (_hasError)
        {
        <div class="alert alert-danger text-center">
            <i class="bi bi-exclamation-circle-fill me-2"></i>
            <strong>Error:</strong> We encountered an issue while fetching the user list.
        </div>
        }
        else
        {
               <Grid TItem="UserDTO"
                          Class="table table-hover table-responsive"
                          DataProvider="CustomersDataProvider"
                          AllowFiltering="true"
                          AllowPaging="true"
                          PageSize="5"
                          AllowSorting="true"
                          AllowSelection="true"
                          SelectionMode="GridSelectionMode.Multiple"
                          SelectedItemsChanged="OnSelectedItemsChanged"
                          Responsive="true"
                          Unit="Unit.Px">
                <GridColumn TItem="UserDTO" HeaderText="Username" PropertyName="Username" SortString="Username" SortKeySelector="item => item.Username" >
                            @context.Username
                        </GridColumn>
                <GridColumn TItem="UserDTO"  HeaderText="Email" PropertyName="Email" SortString="Email" SortKeySelector="item => item.Email" >
                            @context.Email
                        </GridColumn>
                <GridColumn TItem="UserDTO" HeaderText="Rol" PropertyName="Roles" SortString="Roles" SortKeySelector="item => string.Join(',', item.RolesIds)">
                    @string.Join(", ", context.RolesIds)
                </GridColumn>
                <!-- Status Column -->
                <GridColumn TItem="UserDTO" HeaderText="Status" PropertyName="IsActive" SortKeySelector="item => item.IsActive">
                    <div class="text-center">
                        <button class="btn @(context.IsActive ? "btn-danger" : "btn-success")"
                                @onclick="() => ToggleUserActiveStatus(context.Id, !context.IsActive)">
                            @(context.IsActive ? "Activeer" : "Deactiveer")
                        </button>
                    </div>
                </GridColumn>
                <!-- Actie Column -->
                <GridColumn TItem="UserDTO" HeaderText="Actie" AllowFiltering="false">
                    <div>
                        <button type="button" @onclick="() => ShowDeleteModal(context.Id)"
                                class="btn btn-outline-danger"
                                data-toggle="modal" data-target="#exampleModal">
                            <i class="bi bi-trash"></i>
                        </button>
                        <a class="btn btn-outline-secondary" href="/admin/user/@(context.Id)">
                            <i class="bi bi-pencil"></i>
                        </a>
                    </div>
                </GridColumn>
                      
                      </Grid>

            <div class="mt-3">
                Aantal geselecteerde items: @selectedUsers.Count
            </div>

            <div class="mt-2">
                geselecteerde gebruiker:
                <ul>
                    @foreach (var u in selectedUsers)
                    {
                        <li>@u.Username</li>
                    }
                </ul>
            </div>
                @* <QuickGrid Items="_users.AsQueryable()">
                    <PropertyColumn Property="@(u => u.Username)" Title="Gebruikersnaam" Sortable="true"/>
                    <PropertyColumn Property="@(u => u.Email)" Title="Email" Sortable="true"/>
                    <PropertyColumn Property="@(u => string.Join(", ", u.Roles))" Title="Rol" Sortable="true" />
                    <TemplateColumn Title="Status">
                        @if (@context.IsActive)
                        {
                        <button class="btn btn-danger" @onclick="() => ToggleUserActiveStatus(context, context.Id, false)">
                            Block
                        </button>
                        }
                        else
                        {
                        <button class="btn btn-success" @onclick="() => ToggleUserActiveStatus(context, context.Id, true)">
                            Unblock
                        </button>
                        }
                    </TemplateColumn>

                    <TemplateColumn Title="Actie">
                        <button type="button" @onclick="() => ShowDeleteModal(context.Id)" class="btn btn-outline-danger" data-toggle="modal" data-target="#exampleModal">
                            <i class="bi bi-trash"></i>
                        </button>
                        <a class="btn btn-outline-secondary" href="/admin/user/@(context.Id)">
                            <i class="bi bi-pencil"></i>
                        </a>
                    </TemplateColumn>
                </QuickGrid> *@

                @* @if (userBeingEdited != null)
                {
                <hr />
                <h4>Gebruiker Bewerken: @userBeingEdited.Username</h4>
                <EditForm Model="userBeingEdited" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mt-3">
                        <label for="Username">Gebruikersnaam</label>
                        <InputText id="Username" @bind-Value="userBeingEdited.Username" class="form-control" />
                    </div>

                    <div class="form-group mt-3">
                        <label for="Email">Email</label>
                        <InputText id="Email" @bind-Value="userBeingEdited.Email" type="email" class="form-control" />
                    </div>

                    <div class="form-group mt-3">
                        <label for="Role">Rol</label>
                        <InputSelect id="Role" @bind-Value="userBeingEdited.Roles" class="form-control">
                            @foreach (var role in RoleMapper.GetAllRoles())
                            {
                            <option value="@role">@role</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label for="IsActive">Actief</label>
                        <InputCheckbox id="IsActive" @bind-Value="userBeingEdited.IsActive" />
                    </div>

                    <button type="submit" class="btn btn-primary mt-4">Opslaan</button>
                    <button type="button" class="btn btn-secondary mt-4" @onclick="CancelEditing">Annuleren</button>
                </EditForm> *@
                }
    </div>

    <!-- Modal -->
    @if (isModalVisible)
    {
    <div class="modal fade show shadow-sm" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel">Bevestig Verwijdering</h4>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Weet je zeker dat je deze gebruiker wilt verwijderen?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-success" @onclick="CloseModal">Annuleer</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Delete">Verwijder</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

    }
</CustomCards>



@code {
    private IEnumerable<UserDTO> _users = default!;
    private HashSet<UserDTO> selectedUsers = new();

    private UserDTO userBeingEdited = null;
    private bool _isLoading = true;
    private bool _hasError = false;

    // Boolean to control modal 
    private bool isModalVisible = false;
    private string selectedUserId;

    private void ShowDeleteModal(string userId)
    {
        selectedUserId = userId;
        isModalVisible = true;  // Open modal
    }

    private async Task<GridDataProviderResult<UserDTO>> CustomersDataProvider(GridDataProviderRequest<UserDTO> request)
    {
        if (_users == null)
        {
            // Load users and their roles only once for client-side operations
            _users = (await managementApiRepository.GetAllUsersAsync()).ToList();
        }
        return await Task.FromResult(request.ApplyTo(_users));
    }

    private Task OnSelectedItemsChanged(HashSet<UserDTO> users)
    {
        selectedUsers = users is not null && users.Any() ? users : new();
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true; // Stel _isLoading in op true voordat je de data ophaalt

        try
        {
            _users = (await managementApiRepository.GetAllUsersAsync()).ToList(); 
            _hasError = !_users.Any();

        } catch (HttpRequestException ex)
        {
            _hasError = true;  
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _hasError = true; 
            Console.WriteLine($"An error occurred: {ex.Message}");
        } finally
        {
            _isLoading = false; 
        }
    }

    private void StartEditingUser(UserDTO user)
    {
        userBeingEdited = user;
    }

    private void CancelEditing()
    {
        userBeingEdited = null;
    }

    private async Task HandleValidSubmit()
    {
        if (userBeingEdited != null)
        {
            try
            {
                var updatedUser = await managementApiRepository.UpdateUserRoleAsync(userBeingEdited);

                if (updatedUser != null)
                {
                    // Update overige gebruiker-gegevens
                    var response = await apiClient.PutAsJsonAsync($"/api/User/{userBeingEdited.Id}", userBeingEdited);
                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Gebruiker succesvol bijgewerkt.");
                        userBeingEdited = null;
                        StateHasChanged();
                    }
                    else
                    {
                        Console.WriteLine($"Fout bij het bijwerken van de gebruiker: {response.ReasonPhrase}");
                    }
                }
                else
                {
                    Console.WriteLine("Fout bij het bijwerken van de rollen.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fout bij het bijwerken van de gebruiker: {ex.Message}");
            }
        }
    }

    // Close the modal
    private void CloseModal()
    {
        isModalVisible = false;
    }

    async Task Delete()
    {
    //     try
    //     {
    //         var response = await apiClient.DeleteAsync($"/api/User/delete/{selectedUserId}");
    //         if (response.IsSuccessStatusCode)
    //         {
    //             var userToRemove = _users.FirstOrDefault(u => u.Id == selectedUserId);
    //             if (userToRemove != null)
    //             {
    //                 _users.Remove(userToRemove);
    //                 StateHasChanged();
    //                 isModalVisible = false;
    //             }
    //         }
    //         else
    //         {
    //             Debug.WriteLine($"Failed to delete user {selectedUserId}: {response.ReasonPhrase}");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Debug.WriteLine($"Error deleting user: {ex.Message}");
    //     }
    }

    private async Task ToggleUserActiveStatus(string userId, bool isActive)
    {
        try
        {
            var command = new DeactivateUserCommand
            {
                _userId = userId,
                IsActive = isActive // Pass true to unblock, false to block
            };

            var response = await apiClient.PutAsJsonAsync($"/api/User/setactivestate/{userId}", command);
            Debug.WriteLine($"Request URL: users/{userId}");
            if (!response.IsSuccessStatusCode)
            {
                var errorDetails = await response.Content.ReadAsStringAsync();
                Debug.WriteLine($"Error updating user status: {response.StatusCode} - {errorDetails}");
            }

            if (response.IsSuccessStatusCode)
            {
                var updatedUser = await response.Content.ReadFromJsonAsync<UserDTO>();
                if (updatedUser != null)
                {
                    // Update the local user list
                    var localUser = _users.FirstOrDefault(u => u.Id == userId);
                    if (localUser != null)
                    {
                        localUser.IsActive = updatedUser.IsActive;
                    }
                    StateHasChanged();
                }
            }
            else
            {
                Console.WriteLine($"Error updating user status: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during status update: {ex.Message}");
        }
    }

}
