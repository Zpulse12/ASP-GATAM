

@using Gatam.Application.CQRS

@page "/admin/user-list"
@using System.Diagnostics

@using Gatam.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http;
@rendermode InteractiveServer


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="mb-0">Overzicht gebruikers</h2>
                </div>
                <div class="card-body">
                    @if (_isLoading)
                    {
                        <div class="alert alert-info text-center">
                            <div class="spinner-border text-primary me-2" role="status"></div>
                            Loading users... Please wait.
                        </div>
                    }
                    else if (_hasError)
                    {
                        <div class="alert alert-danger text-center">
                            <i class="bi bi-exclamation-circle-fill me-2"></i>
                            <strong>Error:</strong> We encountered an issue while fetching the user list.
                        </div>
                    }
                    else
                    {
                        <QuickGrid Items="_users.AsQueryable()" class="table table-hover table-bordered">
                            <PropertyColumn Property="@(u => u.UserName)" Title="Gebruikersnaam" Sortable="true" />
                            <PropertyColumn Property="@(u => u.Email)" Title="Email" Sortable="true" />
                            <PropertyColumn Property="@(u => u._role)" Title="Rol" Sortable="true" />
                            <PropertyColumn Property="@(u => u.AccessFailedCount)" Title="Mislukte pogingen" Sortable="true" />
                            <PropertyColumn Property="@(u => u.LockoutEnabled)" Title="Vergrendeld account" Sortable="true" />
                            <PropertyColumn Property="@(u => u.EmailConfirmed)" Title="Email Bevestigd" Sortable="true" />
                            <TemplateColumn Title="Actions">
                                @if (@context.IsActive)
                                {
                                    <button class="btn btn-danger" @onclick="() => ToggleUserActiveStatus(context,context.Id, false)">
                                        Deactiveer
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-success" @onclick="() => ToggleUserActiveStatus(context,context.Id, true)">
                                        Activeer
                                    </button>
                                }
                                <button  @onclick="@( () => Delete(context.Id))" class="btn btn-outline-secondary">verwijder</button>
                            </TemplateColumn>
                       
                            


                        </QuickGrid>
                    }

                    
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<ApplicationUser> _users = [];
    private bool _isLoading = true;
    private bool _hasError = false;

    async Task Delete(string userId)
    {
        Debug.WriteLine(userId);
        try
        {

            
            var response = await Http.GetFromJsonAsync<List<ApplicationUser>>("api/User");
            if (response != null && response.Count > 0)

            var response = await Http.DeleteAsync($"api/User/delete/{userId}");
            if (response.IsSuccessStatusCode)

            {
                var userToRemove = _users.FirstOrDefault(u => u.Id == userId);
                if (userToRemove != null)
                {
                    _users.Remove(userToRemove);
                    StateHasChanged();
                }
            }
            else
            {
                Debug.WriteLine($"Failed to delete user {userId}: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error deleting user: {ex.Message}");
        }
    }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var response = await Http.GetFromJsonAsync<List<ApplicationUser>>("api/User");
            if (response != null && response.Count > 0)
            {
                _users = response;
            }
            else
            {
                _hasError = true;  // No users found or response is null
            }
          
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;  // A request error occurred
            Console.WriteLine($"Request error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }


    }

    private async Task ToggleUserActiveStatus(ApplicationUser user,string userId, bool isActive)
    {

        user.IsActive = !user.IsActive;
        try
        {
            var command = new DeactivateUserCommand
                {
                    _userId = userId,
                    IsActive = isActive 
                };
            var response = await Http.PutAsJsonAsync($"api/User/deactivate/{userId}", command);
            if (response.IsSuccessStatusCode)
            {
                var updatedUser = await response.Content.ReadFromJsonAsync<ApplicationUser>();

                if (updatedUser != null)
                {
                    // Werk de lijst bij met de gedeactiveerde gebruiker
                    var loclalUser = users.FirstOrDefault(u => u.Id == userId);
                    if (loclalUser != null)
                    {
                        loclalUser.IsActive = updatedUser.IsActive;
                    }
                }
            }
            else
            {
                Console.WriteLine("Error updating user status: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during status update: {ex.Message}");
        }
    }

    
}
