@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@page "/admin/user-list"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiClient apiClient

@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireManagementRole")]

<InactiveUserRedirect />

<CustomCards>
    <div class="card-body">
        <div class="card-header">
            <h5>
                @if (_isBeheerder)
                {
                    <span>Alle Gebruikers</span>
                }
                else
                {
                    <span>Mijn Volgers</span>
                }
            </h5>
        </div>

        <Grid TItem="UserDTO"
              @ref="userGrid"
              DataProvider="CustomersDataProvider"
              AllowFiltering="true"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="10"
              ShowPager="true"
              Responsive="true"
              Class="table table-hover">
            <GridColumns>
                <GridColumn TItem="UserDTO" 
                           HeaderText="Naam" 
                           PropertyName="Name"
                           SortKeySelector="@(item => item.Name)">
                    @context.Name
                </GridColumn>
                <GridColumn TItem="UserDTO" 
                           HeaderText="Achternaam" 
                           PropertyName="Surname"
                           SortKeySelector="@(item => item.Surname)">
                    @context.Surname
                </GridColumn>
                <GridColumn TItem="UserDTO" 
                           HeaderText="Email" 
                           PropertyName="Email"
                           SortKeySelector="@(item => item.Email)">
                    @context.Email
                </GridColumn>
                <GridColumn TItem="UserDTO" 
                           HeaderText="Gsm-nummer" 
                           PropertyName="PhoneNumber"
                           SortKeySelector="@(item => item.PhoneNumber)">
                    @context.PhoneNumber
                </GridColumn>
                <GridColumn TItem="UserDTO" 
                           HeaderText="Status" 
                           PropertyName="IsActive" 
                           SortKeySelector="item => item.IsActive">
                    <div class="">
                        <button class="btn @(context.IsActive ? "btn-danger" : "btn-success")"
                                @onclick="() => ToggleUserActiveStatus(context.Id, !context.IsActive)" @onclick:stopPropagation>
                            @(context.IsActive ? "Deactiveer" : "Activeer")
                        </button>
                    </div>
                </GridColumn>
                
                @if (_isBeheerder)  
                {
                    <GridColumn TItem="UserDTO" HeaderText="Acties">
                        <div class="">
                            <button type="button" @onclick="() => ShowDeleteModal(context.Id)"
                                    class="btn btn-outline-danger"
                                    data-toggle="modal" data-target="#exampleModal" @onclick:stopPropagation>
                                <i class="bi bi-trash"></i>
                            </button>
                            <a class="btn btn-outline-secondary" href="/admin/user/@(context.Id)" @onclick:stopPropagation>
                                <i class="bi bi-pencil"></i>
                            </a>
                        </div>
                    </GridColumn>
                }
            </GridColumns>
        </Grid>
    </div>
        @if (isRolesModalVisible)
        {
            <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title" id="userDetailsModalLabel">Gebruikersgegevens</h4>
                        </div>
                        <div class="modal-body">
                            <p><strong>Gebruikersnaam:</strong> @selectedUser?.Username</p>
                            <p><strong>E-mail:</strong> @selectedUser?.Email</p>
                            <p><strong>Rollen:</strong></p>
                            <ul>
                                @if (selectedUser?.Id != null && userRolesMap.TryGetValue(selectedUser?.Id, out var roles))
                                {
                                    foreach (var role in roles)
                                    {
                                        <li>@role</li>
                                    }
                                }
                                else
                                {
                                    <li>Geen rollen gevonden</li>
                                }
                            </ul>
                            <a class="btn" style="background-color:#4454D2; color:white" href="/admin/user/@(selectedUser.Id)">
                                Role toewijzen
                            </a>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" @onclick="@(() => CloseModal("Role"))">Sluiten</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    @if (isDeleteModalVisible)
    {
        <div class="modal fade show shadow-sm" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="exampleModalLabel">Bevestig Verwijdering</h4>
                        <button type="button" class="close" @onclick="@(() => CloseModal("Delete"))" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Weet je zeker dat je deze gebruiker wilt verwijderen?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-success" @onclick="@(() => CloseModal("Delete"))">Annuleer</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Delete">Verwijder</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>

    }

</CustomCards>


@code {
    [Inject] ModalService ModalService { get; set; } = default!;
    [Inject] protected ToastService toastService { get; set; } = default!;

    private List<UserDTO> _users = new List<UserDTO>();

    private UserDTO userBeingEdited = null;

    private UserDTO selectedUser;

    private Dictionary<string, List<string>> userRolesMap = new();

    private bool _isLoading = true;
    private bool _hasError = false;

    private bool isDeleteModalVisible = false;
    private bool isRolesModalVisible = false;
    private string selectedUserId;
    private bool _isBeheerder = false;
    private string _currentUserId;

    private Grid<UserDTO> userGrid = new();

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            _isBeheerder = user.IsInRole(RoleMapper.Roles[CustomRoles.BEHEERDER].Id);
            _currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            await LoadUsers();
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het initialiseren van de pagina."));
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _isBeheerder = authState.User.IsInRole(RoleMapper.Roles[CustomRoles.BEHEERDER].Name);
            
            
            if (_isBeheerder)
            {   
                _users = await apiClient.GetFromJsonAsync<List<UserDTO>>("/api/user");
            }
            else
            {
                _users = await apiClient.GetFromJsonAsync<List<UserDTO>>($"api/user/{_currentUserId}/begeleider");
            }
            
            StateHasChanged();
        }
        catch
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het laden van de gebruikers."));
        }
    }

    private void ShowDeleteModal(string userId)
    {
        selectedUserId = userId;
        isDeleteModalVisible = true;
    }

    private async Task<GridDataProviderResult<UserDTO>> CustomersDataProvider(GridDataProviderRequest<UserDTO> request)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            _isBeheerder = user.IsInRole(RoleMapper.Roles[CustomRoles.BEHEERDER].Name);
            
            List<UserDTO> users;
            if (_isBeheerder)
            {
                users = await apiClient.GetFromJsonAsync<List<UserDTO>>("/api/user");
            }
            else
            {
                users = await apiClient.GetFromJsonAsync<List<UserDTO>>($"api/user/{_currentUserId}/begeleider");
            }

            return request.ApplyTo(users ?? new List<UserDTO>());
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het ophalen van de gebruikers."));
            return request.ApplyTo(new List<UserDTO>());
        }
    }

    private async Task OnRowClick(GridRowEventArgs<UserDTO> args)
    {
        selectedUser = args.Item;
        userRolesMap[selectedUser.Id] = await apiClient.GetFromJsonAsync<List<string>>($"api/user/{selectedUser.Id}/roles");
        isRolesModalVisible = true;
    }

    private void CloseModal(string modalType)
    {
        if (modalType == "Delete")
        {
            isDeleteModalVisible = false;
            selectedUserId = null;
        }
        else if (modalType == "Role")
        {
            isRolesModalVisible = false;
            selectedUser = null;
        }
    }

    async Task Delete()
    {
        try
        {
            var response = await apiClient.DeleteAsync($"/api/User/delete/{selectedUserId}");
            if (response.IsSuccessStatusCode)
            {
                await userGrid.RefreshDataAsync();
                selectedUser = null;
                selectedUserId = null;
                CloseModal("Delete");
                toastService.Notify(new(ToastType.Success, "Gebruiker succesvol verwijderd."));
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het verwijderen van de gebruiker."));
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het verwijderen van de gebruiker."));
        }
    }

    private async Task ToggleUserActiveStatus(string userId, bool isActive)
    {
        try
        {
            var command = new { UserId = userId, IsActive = isActive };
            var response = await apiClient.PatchAsJsonAsync($"/api/User/setactivestate", command);

            if (response.IsSuccessStatusCode)
            {
                await userGrid.RefreshDataAsync();
                toastService.Notify(new(ToastType.Success, $"Gebruiker status succesvol {(isActive ? "geactiveerd" : "gedeactiveerd")}."));
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het wijzigen van de gebruiker status."));
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het wijzigen van de gebruiker status."));
        }
    }
}

