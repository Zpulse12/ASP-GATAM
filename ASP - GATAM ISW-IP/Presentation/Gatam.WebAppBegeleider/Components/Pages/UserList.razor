@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@page "/admin/user-list"
@using System.Diagnostics

@using Gatam.Infrastructure.Repositories

@inject ApiClient apiClient
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor


@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireManagementRole")]

<InactiveUserRedirect />
<CustomCards>
    <div class="card-body">
        <div class="card-header">
            <h5>
                Gebruikers overzicht
            </h5>
        </div>
        @if (_isLoading)
        {
        <div class="text-center">
                <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
        </div>
        }
        @if (_hasError)
        {
            <Callout Color="CalloutColor.Danger" >
                <strong>Error:</strong> Er is een probleem opgetreden bij het ophalen van de gebruikerslijst.
           </Callout>
        }

        else
        {
               <Grid TItem="UserDTO"
                          AllowRowClick="true"
                          AllowSorting="true"
                          Class="table table-hover"
                          DataProvider="CustomersDataProvider"
                          AllowPaging="true"
                          PageSize="5"
                  HeaderRowCssClass="custom-header"
                          OnRowClick="OnRowClick"
                          Responsive="true">
                        <GridColumns>
                            <GridColumn TItem="UserDTO" HeaderText="Username" PropertyName="Username" SortString="Username" SortKeySelector="item => item.Nickname">
                                @context.Nickname
                            </GridColumn>
                            <GridColumn TItem="UserDTO" HeaderText="Email" PropertyName="Email" SortString="Email" SortKeySelector="item => item.Email">
                                @context.Email
                            </GridColumn>
                            <GridColumn TItem="UserDTO" HeaderText="Status" PropertyName="IsActive" SortKeySelector="item => item.IsActive" >
                                <div class="text-center">
                                    <button class="btn @(context.IsActive ? "btn-danger" : "btn-success")"
                                    @onclick="() => ToggleUserActiveStatus(context.Id, !context.IsActive)" @onclick:stopPropagation>
                                        @(context.IsActive ? "Deactiveer" : "Activeer")
                                    </button>
                                </div>
                            </GridColumn>
                            <!-- Actie Column -->
                            <GridColumn TItem="UserDTO" HeaderText="Actie">
                                <div>
                                    <button type="button" @onclick="() => ShowDeleteModal(context.Id)"
                                            class="btn btn-outline-danger"
                                    data-toggle="modal" data-target="#exampleModal" @onclick:stopPropagation>
                                        <i class="bi bi-trash"></i>
                                    </button>
                            <a class="btn btn-outline-secondary" href="/admin/user/@(context.Id)" @onclick:stopPropagation>
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                </div>
                            </GridColumn>
                        </GridColumns>
                      </Grid>
        }
    </div>
        @if (isModalVisible)
        {
            <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title" id="userDetailsModalLabel">Gebruikersgegevens</h4>
                        </div>
                        <div class="modal-body">
                            <p><strong>Gebruikersnaam:</strong> @selectedUser?.Nickname</p>
                            <p><strong>E-mail:</strong> @selectedUser?.Email</p>
                            <p><strong>Rollen:</strong></p>
                            <ul>
                                @if (selectedUser?.Id != null && userRolesMap.TryGetValue(selectedUser?.Id, out var roles))
                                {
                                    foreach (var role in roles)
                                    {
                                        <li>@role</li>
                                    }
                                }
                                else
                                {
                                    <li>Geen rollen gevonden</li>
                                }
                            </ul>
                            <a class="btn" style="background-color:#4454D2; color:white" href="/admin/user/@(selectedUser.Id)">
                                Role toewijzen
                            </a>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" @onclick="CloseModal">Sluiten</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    @if (isModalVisible)
    {
    <div class="modal fade show shadow-sm" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel">Bevestig Verwijdering</h4>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Weet je zeker dat je deze gebruiker wilt verwijderen?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-success" @onclick="CloseModal">Annuleer</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Delete">Verwijder</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

    }

</CustomCards>


@code {
    [Inject] ModalService ModalService { get; set; } = default!;

    private List<UserDTO> _users = new List<UserDTO>();

    private UserDTO userBeingEdited = null;

    private HashSet<UserDTO> selectedUsers = new();
    private UserDTO selectedUser;

    private Dictionary<string, List<string>> userRolesMap = new();

    private bool _isLoading = true;
    private bool _hasError = false;

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Boolean to control modal 
    private bool isModalVisible = false;
    private string selectedUserId;



    private void ShowDeleteModal(string userId)
    {
        selectedUserId = userId;
        isModalVisible = true;  
    }

    private async Task<GridDataProviderResult<UserDTO>> CustomersDataProvider(GridDataProviderRequest<UserDTO> request)
    {
        _isLoading = true; 

        try
        {
            _users = await apiClient.GetFromJsonAsync<List<UserDTO>>("api/user");
            _hasError = !_users.Any();

        } catch (HttpRequestException ex)
        {
            _hasError = true;  
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _hasError = true; 
            Console.WriteLine($"An error occurred: {ex.Message}");
        } finally
        {
            _isLoading = false; 
        }
        return await Task.FromResult(request.ApplyTo(_users));
    }


    private async Task OnRowClick(GridRowEventArgs<UserDTO> args)
    {
        selectedUser = args.Item;
        userRolesMap[selectedUser.Id] = await apiClient.GetFromJsonAsync<List<string>>($"api/user/{selectedUser.Id}/roles");
        isModalVisible = true;

    }




    private void CloseModal()
    {
        isModalVisible = false;
        selectedUser = null;
    }

    async Task Delete()
    {
        try
        {
            var response = await apiClient.DeleteAsync($"/api/User/delete/{selectedUserId}");
            if (response.IsSuccessStatusCode)
            {
                // Verwijder de gebruiker uit de lijst
                var userToRemove = _users.FirstOrDefault(u => u.Id == selectedUserId);
                if (userToRemove != null)
                {
                    _users.Remove(userToRemove);
                    selectedUser = null; // Reset selectedUser na verwijdering
                    selectedUserId = null;
                    CloseModal();
                    StateHasChanged();
                }
            }
            else
            {
                Debug.WriteLine($"Failed to delete user {selectedUserId}: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error deleting user: {ex.Message}");
        }
    }


    private async Task ToggleUserActiveStatus( string userId, bool isActive)
    {
        try
        {
            var command = new { UserId = userId, IsActive = isActive };

            var response = await apiClient.PatchAsJsonAsync($"/api/User/setactivestate/{userId}",command);

            if (response.IsSuccessStatusCode)
            {
                var updatedUser = await response.Content.ReadFromJsonAsync<UserDTO>();
                if (updatedUser != null)
                {
                    var localUser = _users.FirstOrDefault(u => u.Id == userId);
                    if (localUser != null)
                    {
                        localUser.IsActive = updatedUser.IsActive;
                    }
                    StateHasChanged();
                }
            }
            else
            {
                Console.WriteLine($"Error updating user status: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during status update: {ex.Message}");
        }
    }


}

