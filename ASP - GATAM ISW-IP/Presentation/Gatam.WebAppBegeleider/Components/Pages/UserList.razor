@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.Extensions
@page "/admin/user-list"
@using System.Diagnostics
@using Gatam.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ApiClient apiClient


@rendermode InteractiveServer
@inject NavigationManager Navigation


@attribute [Authorize(Policy = "RequireManagementRole")]
<CustomCards>
    <div class="card-body">
        <div class="card-header">
            <h5>
                Gebruikers overzicht
            </h5>
        </div>
        <div class="alert alert-success" role="alert" style="display: @(string.IsNullOrEmpty(successMessage) ? "none" : "block")">
            @successMessage
        </div>
        @if (_isLoading)
        {
        <div class="alert alert-info text-center">
            <div class="spinner-border text-primary me-2" role="status"></div>
            Loading users... Please wait.
        </div>
        }
        else if (_hasError)
        {
        <div class="alert alert-danger text-center">
            <i class="bi bi-exclamation-circle-fill me-2"></i>
            <strong>Error:</strong> We encountered an issue while fetching the user list.
        </div>
        }
        else
        {
        <div class="table-responsive-lg">
            <div>
                <QuickGrid Items="_users.AsQueryable()">
                    <PropertyColumn Property="@(u => u.UserName)" Title="Gebruikersnaam" Sortable="true" />
                    <PropertyColumn Property="@(u => u.Email)" Title="Email" Sortable="true" />
                    <PropertyColumn Property="@(u => u.Role)" Title="Rol" Sortable="true" />
                    <PropertyColumn Property="@(u => u.AccessFailedCount)" Title="Mislukte pogingen" Sortable="true" />
                    <PropertyColumn Property="@(u => u.LockoutEnabled)" Title="Vergrendeld account" Sortable="true" />
                    <PropertyColumn Property="@(u => u.EmailConfirmed)" Title="Email Bevestigd" Sortable="true" />
                    <TemplateColumn Title="Status">
                        @if (@context.IsActive)
                        {
                        <button class="btn btn-danger" @onclick="() => ToggleUserActiveStatus(context,context.Id, false)">
                            Deactiveer
                        </button>
                        }
                        else
                        {
                        <button class="btn btn-success" @onclick="() => ToggleUserActiveStatus(context,context.Id, true)">
                            Activeer
                        </button>
                        }
                    </TemplateColumn>
                    <TemplateColumn Title="Verwijder">
                        <button type="button" @onclick="() => ShowDeleteModal(context.Id)" class="btn btn-outline-danger" data-toggle="modal" data-target="#exampleModal">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button @onclick="() => StartEditingUser(context)" class="btn btn-outline-secondary">
                            <i class="bi bi-pencil"></i>
                        </button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
        }
    </div>
    @if (userBeingEdited != null)
    {
        <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="editUserModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editUserModalLabel">Gebruiker Bewerken: @userBeingEdited.UserName</h5>
                        <button type="button" class="btn-close" @onclick="CancelEditing" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        }
                        <EditForm Model="userBeingEdited" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group mt-3">
                                <label for="Username">Gebruikersnaam</label>
                                <InputText id="Username" @bind-Value="userBeingEdited.UserName" class="form-control" />
                            </div>

                            <div class="form-group mt-3">
                                <label for="Email">Email</label>
                                <InputText id="Email" @bind-Value="userBeingEdited.Email" type="email" class="form-control" />
                            </div>

                            <div class="form-group mt-3">
                                <label for="Role">Rol</label>
                                <InputSelect id="Role" @bind-Value="userBeingEdited.Role" class="form-control">
                                    @foreach (var role in Enum.GetValues(typeof(ApplicationUserRoles)))
                                    {
                                        <option value="@role">@role</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="form-group mt-3">
                                <label for="IsActive">Actief</label>
                                <InputCheckbox id="IsActive" @bind-Value="userBeingEdited.IsActive" />
                            </div>

                            <button type="submit" class="btn btn-outline-success">Opslaan</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CancelEditing">Annuleren</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    <!-- Modal -->
    @if (isModalVisible)
    {
    <div class="modal fade show shadow-sm" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel">Bevestig Verwijdering</h4>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Weet je zeker dat je deze gebruiker wilt verwijderen?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-success" @onclick="CloseModal">Annuleer</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Delete">Verwijder</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

    }
</CustomCards>



@code {
    private List<ApplicationUser> _users = new List<ApplicationUser>();
    private ApplicationUser userBeingEdited = null;
    private bool _isLoading = true;
    private bool _hasError = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    // Boolean to control modal visibility
    private bool isModalVisible = false;  
    private string selectedUserId;

    private void ShowDeleteModal(string userId)
    {
        selectedUserId = userId;
        isModalVisible = true;  // Open modal
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await apiClient.GetFromJsonAsync<List<ApplicationUser>>("/api/User");
            if (response != null && response.Count > 0)
            {
                _users = response;
            }
            else
            {
                _hasError = true;  // No users found or response is null
            }
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;  // A request error occurred
            Console.WriteLine($"Request error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void StartEditingUser(ApplicationUser user)
    {
        userBeingEdited = user;
        errorMessage = string.Empty; 
        successMessage = string.Empty; 
    }

    private void CancelEditing()
    {
        userBeingEdited = null;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private async Task HandleValidSubmit()
    {
        if (userBeingEdited != null)
        {
            try
            {
                var response = await apiClient.PutAsJsonAsync($"api/User/{userBeingEdited.Id}", userBeingEdited);
            
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Gebruiker succesvol bijgewerkt!";
                    userBeingEdited = null;  // Sluit de modal
                    StateHasChanged();  // Update de UI
                }
                else
                {
                    var errorResponse = await response.Content.ReadFromJsonAsync<ValidationErrorResponse>();
                    if (errorResponse?.Failures != null && errorResponse.Failures.Any())
                    {
                        errorMessage = string.Join(", ", errorResponse.Failures.Select(f => $"{f.PropertyName}: {f.ErrorMessage}"));
                    }
                    else
                    {
                        errorMessage = errorResponse?.Message ?? "Er is een onbekende fout opgetreden.";
                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Fout bij het bijwerken van de gebruiker: {ex.Message}";
            }
        }
    }

    // Close the modal
    private void CloseModal()
    {
        isModalVisible = false;
    }

    async Task Delete()
    {
        try
        {

            var response = await apiClient.DeleteAsync($"api/User/{selectedUserId}");
            if (response.IsSuccessStatusCode)
            {
                var userToRemove = _users.FirstOrDefault(u => u.Id == selectedUserId);
                if (userToRemove != null)
                {
                    _users.Remove(userToRemove);
                    StateHasChanged();
                    isModalVisible = false;
                }
            }
            else
            {
                Debug.WriteLine($"Failed to delete user {selectedUserId}: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error deleting user: {ex.Message}");
        }
    }

    private async Task ToggleUserActiveStatus(ApplicationUser user, string userId, bool isActive)
    {
        user.IsActive = !user.IsActive;
        try
        {
            var command = new DeactivateUserCommand
            {
                _userId = userId,
                IsActive = isActive
            };
            var response = await apiClient.PutAsJsonAsync($"api/User/{userId}/setactivestate", command);
            if (response.IsSuccessStatusCode)
            {
                var updatedUser = await response.Content.ReadFromJsonAsync<ApplicationUser>();
                if (updatedUser != null)
                {
                    var loclalUser = _users.FirstOrDefault(u => u.Id == userId);
                    if (loclalUser != null)
                    {
                        loclalUser.IsActive = updatedUser.IsActive;
                    }
                }
            }
            else
            {
                Console.WriteLine($"Error updating user status: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during status update: {ex.Message}");
        }
    }
    public class ValidationErrorResponse
    {
        public string Message { get; set; }
        public List<ValidationFailure> Failures { get; set; }
    }

    public class ValidationFailure
    {
        public string PropertyName { get; set; }
        public string ErrorMessage { get; set; }
    }

}