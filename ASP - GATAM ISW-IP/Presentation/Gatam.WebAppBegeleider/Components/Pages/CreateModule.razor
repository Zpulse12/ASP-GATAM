@page "/content/create"
@inject ApiClient apiClient
@rendermode InteractiveServer
@using Gatam.Application.CQRS.Module
@using Gatam.Application.CQRS.Questions
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using System.Diagnostics
@inject AuthenticationStateProvider authenticationStateProvider


@attribute [Authorize(Policy = "RequireMakerRole")]


<CustomCards>
    <h3>Maak module aan</h3>

    <div class="mb-3">
        <label for="title">Titel</label>
        <InputText id="title" class="form-control" @bind-Value="newModule.Title" />
    </div>

    <div class="mb-3">
        <label for="category">Categorie</label>
        <InputText id="category" class="form-control" @bind-Value="newModule.Category" />
    </div>

    <h4>Vragenlijst</h4>
    <div class="mb-3">
        <label for="questionTitle">Vraag</label>
        <InputText id="questionTitle" class="form-control" @bind-Value="newQuestion.QuestionTitle" />
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Type vraag:<span class="text-danger">*</span></label>
        <div class="col-md-10">
            <InputSelect @bind-Value="selectedOption" class="form-control">
                <option value="@QuestionType.MULTIPLE_CHOICE">Meerkeuzevraag</option>
                <option value="@QuestionType.CHOICE_LIST">Keuzevraag</option>
                <option value="@QuestionType.OPEN">Open vraag</option>
                <option value="@QuestionType.TRUE_OR_FALSE">Waar / onwaar vraag</option>
            </InputSelect>
        </div>
    </div>

    <button class="btn btn-secondary mb-3" @onclick="AddQuestion">Vraag toevoegen</button>

    <ul>
        @foreach (var question in questions)
        {
            <li>@question.QuestionTitle (@((QuestionType)question.QuestionType))</li>
        }
    </ul>

    <button style="margin:10px;" type="submit" @onclick="CreateNewModule" class="btn btn-primary">Module Aanmaken</button>

    @if (!string.IsNullOrEmpty(errorMessage) && showError)
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(successMessage) && showSuccess)
    {
        <div class="alert alert-success">
            @successMessage
        </div>
    }

</CustomCards>

@code {
    private ApplicationModule newModule = new ApplicationModule();
    private string errorMessage = "";
    private string successMessage ="";
    private bool showError;
    private bool showSuccess;

    private EditContext editContext;
    private AutoComplete<Question> search;
    private Question newQuestion = new Question();
    private QuestionType selectedOption = QuestionType.OPEN;
    private bool isLoading = false;
    private string searchValue;
    private List<Question> questions = new List<Question>();
    private List<QuestionAnswer> answers = new List<QuestionAnswer>();
    private Grid<Question> questionGrid = new Grid<Question>();
    private Grid<QuestionAnswer> answerGrid = new Grid<QuestionAnswer>();
    private QuestionAnswer currentAnswer = new QuestionAnswer();


    [Inject] protected ToastService toastService { get; set; } = default!;
    private async Task  AddQuestion()
    {
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        string userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            toastService.Notify(new(ToastType.Success, "Kan vraag niet toevoegen. Gebruiker-ID niet gevonden." ));
            return;
        }

        // Add question to the list with required fields
        questions.Add(new Question()
            {
                QuestionTitle = newQuestion.QuestionTitle,
                QuestionType = newQuestion.QuestionType,
                CreatedUserId = userId,
                LastUpdatedUserId = userId,
                ApplicationModuleId = newModule.Id
            });

        // Reset the form
        newQuestion = new Question();
    }


    protected override async Task OnInitializedAsync()
    {
        ReseTabelForm();
    }

    private async Task CreateNewModule()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        showError = false;
        showSuccess = false;
        try
        {
            
            // foreach (var question in questions)
            // {
            //     question.ApplicationModuleId = newModule.Id; 
            // }

            
            var command = new CreateModuleCommand
                {
                    _module = newModule,
                    Question = questions 
                };

            var result = await apiClient.PostAsJsonAsync("api/module", command);
            var content1 = await result.Content.ReadAsStringAsync();
            Debug.WriteLine("API response: " + content1);
            if (result.IsSuccessStatusCode)
            {
                var moduleResponse = await result.Content.ReadFromJsonAsync<ApplicationModule>();
                newModule.Id = moduleResponse.Id;

                // Send the questions separately if needed
                var addQuestionsCommand = new CreateQuestionCommand
                    {
                        question = newQuestion
                    };

                var questionsResult = await apiClient.PostAsJsonAsync("api/question", addQuestionsCommand);

                if (questionsResult.IsSuccessStatusCode)
                {
                    successMessage = "Module en vragen succesvol aangemaakt!";
                    showSuccess = true;
                }
                else
                {
                    errorMessage = "Vragen konden niet worden toegevoegd.";
                    showError = true;
                }
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                Debug.WriteLine("API response: " + content);  
                errorMessage = "Er is een fout opgetreden bij het aanmaken van de module.";
                showError = true;
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Er is een onverwachte fout opgetreden bij het versturen van de aanvraag.";
            showError = true;
            Debug.WriteLine(ex.Message);
        }
        catch (Exception ex)
        {
            errorMessage = "Er is een onverwachte fout opgetreden.";
            showError = true;
            Debug.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
      

      //  StateHasChanged();
    }

    

    private void ReseTabelForm()
    {
        newQuestion = new Question();
        answers.Clear();
        answers.Append(new QuestionAnswer() { Answer = "OPEN", QuestionId = newQuestion.Id });
        editContext = new EditContext(newQuestion);
        selectedOption = QuestionType.OPEN;
    }
    

    
}
