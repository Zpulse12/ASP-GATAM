@page "/content/modules"
@inject ApiClient apiClient
@rendermode InteractiveServer
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@attribute [Authorize(Policy = "RequireMakerRole")]

<div class="module-list-container">
    <div class="module-header">
        <div class="header-content">
            <i class="bi bi-collection-fill header-icon"></i>
            <div>
                <h2 class="text-white mb-0">Modules</h2>
                <p class="text-light mb-0">Beheer alle beschikbare modules</p>
            </div>
        </div>
    </div>

    <div class="module-actions">
        <a href="/content/modules/create" class="btn btn-primary">
            <i class="bi bi-plus-circle me-2"></i>
            Nieuwe Module
        </a>
    </div>

    <div class="module-grid">
        @if (modules != null && modules.Any())
        {
            <div class="row g-4">
                @foreach (var module in modules)
                {
                    <div class="col-12 col-md-6 col-lg-4">
                        <div class="module-card">
                            <div class="card-header">
                                <h3>@module.Title</h3>
                                <span class="category-badge">@module.Category</span>
                            </div>
                            <div class="card-body">
                                <div class="stats">
                                    <div class="stat-item">
                                        <i class="bi bi-question-circle"></i>
                                        <span>@(module.Questions?.Count ?? 0) vragen</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-actions">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => OnShowModalClick(module)">
                                    <i class="bi bi-eye me-1"></i>Details
                                </button>
                                <a href="/content/modules/@module.Id" class="btn btn-outline-secondary btn-sm">
                                    <i class="bi bi-pencil me-1"></i>Bewerken
                                </a>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => OnShowDeleteModalClick(module)">
                                    <i class="bi bi-trash me-1"></i>Verwijderen
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="bi bi-collection-fill"></i>
                <h3>Geen modules gevonden</h3>
                <p>Begin met het maken van een nieuwe module</p>
            </div>
        }
    </div>
</div>

<style>
.module-list-container {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
}

.module-header {
    background: var(--primary-gradient);
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    color: white;
}

.header-content {
    display: flex;
    align-items: center;
    gap: 1.5rem;
}

.header-icon {
    font-size: 2rem;
    background: rgba(255, 255, 255, 0.2);
    padding: 1rem;
    border-radius: 12px;
}

.module-actions {
    margin-bottom: 2rem;
    display: flex;
    justify-content: flex-end;
}

.module-grid {
    margin-top: 2rem;
}

.module-card {
    background: white;
    border-radius: 12px;
    box-shadow: var(--shadow-sm);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.module-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
}

.card-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
}

.card-header h3 {
    margin: 0;
    font-size: 1.2rem;
    color: var(--text-primary);
}

.category-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background-color: var(--primary-color);
    color: white;
    border-radius: 12px;
}
</style>

@code {
    private Grid<ApplicationModule> moduleGrid = new Grid<ApplicationModule>();
    private List<ApplicationModule> modules = new();

    private Modal? modal;
    private ApplicationModule? selectedModule;
    private bool isModalOpen;
    private bool showWarning = false;

    [Inject] protected ToastService toastService { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        var modulesResponse = await apiClient.GetFromJsonAsync<List<ApplicationModule>>("api/module");
        if (modulesResponse != null)
        {
            modules = modulesResponse;
        }
        await base.OnInitializedAsync();
    }


    private async Task Delete()
    {
        try
        {
            var response = await apiClient.DeleteAsync($"api/module/delete/{selectedModule.Id}");
            if (response.IsSuccessStatusCode)
            {
                var moduleToRemove = modules.FirstOrDefault(u => u.Id == selectedModule.Id);
                if (moduleToRemove != null)
                {
                    modules.Remove(moduleToRemove);
                    modules = modules.ToList();
                    selectedModule = null;
                    OnHideModalClick();
                    toastService.Notify(new(ToastType.Success, $"Module {moduleToRemove.Title} is succesvol verwijderd"));
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                if (errorContent.Contains("in gebruik"))
                {
                    toastService.Notify(new(ToastType.Warning, $"De module {selectedModule.Title} kan niet worden verwijderd omdat deze in gebruik is."));
                    showWarning = true;
                }
                else
                {
                    toastService.Notify(new(ToastType.Danger, "Er is een onverwachte fout opgetreden."));
                }
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een onverwachte fout opgetreden bij het versturen van de aanvraag."));
        }
    }

    private async Task OnShowModalClick(ApplicationModule module)
    {
        selectedModule = module;
        isModalOpen = true;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task OnShowDeleteModalClick(ApplicationModule module)
    {
        selectedModule = module;
        isModalOpen = true;
        await modal.ShowAsync();
    }
   

}
