@page "/content/modules"
@inject ApiClient apiClient
@rendermode InteractiveServer
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@attribute [Authorize(Policy = "RequireMakerRole")]


<CustomCards>
    <Modal @ref="modal" @bind-IsOpen="isModalOpen" Title="Module Details" Size="ModalSize.Large">
        <HeaderTemplate>
            <h5 class="modal-title">Details van @selectedModule?.Title</h5>
        </HeaderTemplate>
        <BodyTemplate>
            @if (selectedModule != null)
            {
                <div>
                    <p><strong>Title:</strong> @selectedModule.Title</p>
                    <p><strong>Category:</strong> @selectedModule.Category</p>
                    <h5>Vragen:</h5>
                    @if (selectedModule.Questions != null && selectedModule.Questions.Any())
                    {
                        <ul>
                            @foreach (var question in selectedModule.Questions)
                            {
                                <li>
                                    @question.QuestionTitle - <em>@((QuestionType)question.QuestionType)</em>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>Geen vragen gekoppeld aan deze module.</p>
                    }
                </div>
            }
        </BodyTemplate>
        <FooterTemplate>
            <button class="btn btn-danger" @onclick="OnHideModalClick">Sluiten</button>
        </FooterTemplate>
    </Modal>

    <h2>Modulen</h2>
    <NavLink class="nav-link" href="/content/create" >
        <button class="btn" style="background-color: #4454D2; color:white; font-weight:bold; margin-bottom:10px;">
            Module toevoegen
        </button>
        
    </NavLink>
   
            <Grid TItem="ApplicationModule"
                  @ref="moduleGrid"
                  AllowRowClick="true"
                  AllowSorting="true"
                  Class="table table-hover"
                  AllowPaging="true"
                  Data="modules"
                  PageSize="10"
                  HeaderRowCssClass="custom-header"
                  Responsive="true">
                <GridColumns>
                    <GridColumn TItem="ApplicationModule" HeaderText="Title" PropertyName="Title" SortString="Title" SortKeySelector="item => item.Title">
                        @context.Title
                    </GridColumn>
                    <GridColumn TItem="ApplicationModule" HeaderText="Category:" PropertyName="Category" SortString="Category" SortKeySelector="item => item.Category">
                        @context.Category
                    </GridColumn>
                    <GridColumn TItem="ApplicationModule" HeaderText="Aangemaakt op:" PropertyName="CreatedAt" SortString="QuestionTitle" SortKeySelector="item => item.CreatedAt">
                        <Tooltip Class="me-4" Title="@context.CreatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.CreatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
                    </GridColumn>
                <GridColumn TItem="ApplicationModule" HeaderText="Actie" Filterable="false">
                        <div>
                            <button type="button"
                                    class="btn btn-outline-danger"
                                    data-toggle="modal" data-target="#exampleModal" @onclick:stopPropagation>
                                <i class="bi bi-trash"></i>
                            </button>
                    <button type="button"
                            class="btn" style="background-color:#4454D2; color:white"
                            @onclick="@(() => OnShowModalClick(@context))">
                        <i class="bi bi-info-circle"></i> Details Bekijken
                    </button>
                        </div>
                    </GridColumn>
                </GridColumns>
            </Grid>
</CustomCards>


@code {
    private Grid<ApplicationModule> moduleGrid = new Grid<ApplicationModule>();
    private List<ApplicationModule> modules = new();

    private Modal? modal;
    private ApplicationModule? selectedModule;
    private bool isModalOpen;

    protected override async Task OnInitializedAsync()
    {
        var modulesResponse = await apiClient.GetFromJsonAsync<List<ApplicationModule>>("api/module");
        if (modulesResponse != null)
        {
            modules = modulesResponse;
        }
        await base.OnInitializedAsync();
    }
    private async Task OnShowModalClick(ApplicationModule module)
    {
        selectedModule = module;
        isModalOpen = true;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
   

}
