@page "/content/AssigningModules"
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.WebAppBegeleider.Components.Layout
@using System.Diagnostics
@inject ApiClient ApiClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToastService toastService
@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireManagementRole")]

<link href="/css/modules.css" rel="stylesheet" />

<div class="container-fluid py-3">
    <div class="card shadow-sm border-0">
        <div class="card-header" style="background-color: #4361ee">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="icon-shape bg-white text-primary rounded-circle shadow-sm me-3 p-3">
                        <i class="fas fa-book-reader fs-5"></i>
                    </div>
                    <div class="text-white">
                        <h5 class="fw-bold mb-0 fs-4">Module Toewijzing</h5>
                        <p class="mb-0 fs-6">Wijs modules toe aan trajectvolgers</p>
                    </div>
                </div>
            </div>
        </div>

        @if (IsLoading)
        {
            <div class="card-body d-flex justify-content-center align-items-center" style="min-height: 300px;">
                <div class="spinner-grow text-primary" role="status">
                    <span class="visually-hidden">Laden...</span>
                </div>
            </div>
        }
        else
        {
            <div class="card-body p-4">
                <div class="row g-4">
                    <div class="col-12">
                        <div class="card bg-light border-0">
                            <div class="card-body p-3">
                                <div class="row g-3">
                                    <div class="col-md-5">
                                        <label class="form-label text-muted small">Trajectvolger</label>
                                        <select class="form-select form-select-lg shadow-sm" @bind="SelectedUserId">
                                            <option value="">Selecteer trajectvolger...</option>
                                            @foreach (var user in assignedUsers)
                                            {
                                                <option value="@user.Id">@user.Name @user.Surname</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-5">
                                        <label class="form-label text-muted small">Module</label>
                                        <select class="form-select form-select-lg shadow-sm" @bind="SelectedModuleId">
                                            <option value="">Selecteer module...</option>
                                            @foreach (var module in Modules)
                                            {
                                                <option value="@module.Id">@module.Title</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label text-muted small">&nbsp;</label>
                                        <button @onclick="AssignModuleToUser" 
                                                class="btn btn-lg w-100" 
                                                style="background-color: #4361ee; color: white"
                                                disabled="@(string.IsNullOrEmpty(SelectedUserId) || string.IsNullOrEmpty(SelectedModuleId))">
                                            <i class="fas fa-plus me-2"></i>Toewijzen
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Trajectvolger</th>
                                <th>Toegewezen Modules</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in assignedUsers)
                            {
                                <tr>
                                    <td style="width: 30%">
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(user.Picture))
                                            {
                                                <img src="@user.Picture" class="rounded-circle me-2" width="32" height="32" alt="@user.Name" />
                                            }
                                            else
                                            {
                                                <div class="bg-secondary rounded-circle me-2 d-flex align-items-center justify-content-center" 
                                                     style="width: 32px; height: 32px">
                                                    <i class="fas fa-user text-white small"></i>
                                                </div>
                                            }
                                            <div>
                                                <div>@user.Name @user.Surname</div>
                                                <small class="text-muted">@user.Email</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex flex-wrap gap-2">
                                            @if (user.UserModules != null && user.UserModules.Any())
                                            {
                                                @foreach (var userModule in user.UserModules)
                                                {
                                                    <span class="badge bg-light text-dark border fs-7 py-2">
                                                        <span class="text-secondary">@userModule.Module.Title</span>
                                                        <span class="ms-2 badge @(userModule.State == UserModuleState.NotStarted ? "bg-warning" : "bg-success") small">
                                                            @(userModule.State == UserModuleState.NotStarted ? "Niet gestart" : "In progress")
                                                        </span>
                                                    </span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-muted small fst-italic">Geen modules toegewezen</span>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ApplicationUser> assignedUsers = new();
    private List<ApplicationModule> Modules = new();
    private string? SelectedUserId;
    private string? SelectedModuleId;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var begeleiderId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(begeleiderId))
            {
                assignedUsers = await ApiClient.GetFromJsonAsync<List<ApplicationUser>>($"api/user/{begeleiderId}/begeleider") ?? new();
                
                foreach (var user in assignedUsers)
                {
                    if (string.IsNullOrEmpty(user.Picture) || user.Picture.Trim().ToLower() == "png")
                    {
                        user.Picture = "/images/default.png";
                    }
                }

                Modules = await ApiClient.GetFromJsonAsync<List<ApplicationModule>>("api/module") ?? new();

                foreach (var user in assignedUsers)
                {
                    user.UserModules ??= new List<UserModule>();
                    try 
                    {
                        var modules = await ApiClient.GetFromJsonAsync<List<ApplicationModule>>($"api/user/{user.Id}/modules");
                        if (modules != null)
                        {
                            user.UserModules = modules.Select(m => new UserModule 
                            {
                                Module = m,
                                ModuleId = m.Id,
                                UserId = user.Id,
                                State = UserModuleState.NotStarted
                            }).ToList();
                        }
                    }
                    catch (Exception ex)
                    {
                        toastService.Notify(new(ToastType.Danger, $"Er is een fout opgetreden bij het laden van de modules voor de gebruiker {user.Id}: {ex.Message}"));
                    }
                }
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het laden van de gegevens."));
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnUserSelected(ChangeEventArgs e)
    {
        try 
        {
            SelectedUserId = e.Value?.ToString();
            if (!string.IsNullOrEmpty(SelectedUserId))
            {
                var user = assignedUsers.FirstOrDefault(u => u.Id == SelectedUserId);
                if (user != null)
                {
                    var userModules = await ApiClient.GetFromJsonAsync<List<UserModule>>($"api/user/{SelectedUserId}/modules");
                    if (userModules != null)
                    {
                        user.UserModules = userModules;
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            if (ex is not JSDisconnectedException)
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het ophalen van de modules."));
            }
        }
    }

    private void OnModuleSelected(ChangeEventArgs e)
    {
        try 
        {
            SelectedModuleId = e.Value?.ToString();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            if (ex is not JSDisconnectedException)
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het selecteren van de module."));
            }
        }
    }

    private async Task AssignModuleToUser()
    {
        if (string.IsNullOrEmpty(SelectedUserId) || string.IsNullOrEmpty(SelectedModuleId))
        {
            return;
        }

        // Check of de module al is toegewezen aan deze gebruiker
        var user = assignedUsers.FirstOrDefault(u => u.Id == SelectedUserId);
        if (user?.UserModules?.Any(um => um.Module.Id == SelectedModuleId) == true)
        {
            toastService.Notify(new(ToastType.Warning, "Deze module is al toegewezen aan deze gebruiker."));
            return;
        }

        try 
        {
            var response = await ApiClient.PutAsJsonAsync($"api/user/{SelectedUserId}/AssignUserModule?moduleId={SelectedModuleId}", new { });

            if (response.IsSuccessStatusCode)
            {
                await RefreshUserModules(SelectedUserId);
                toastService.Notify(new(ToastType.Success, "Module succesvol toegewezen!"));
                SelectedUserId = null;
                SelectedModuleId = null;
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het toewijzen van de module."));
            }
        }
        catch (Exception ex)
        {
            if (ex is not JSDisconnectedException)
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het toewijzen van de module."));
            }
        }
    }

    private async Task RefreshUserModules(string userId)
    {
        try
        {
            var user = assignedUsers.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                var modules = await ApiClient.GetFromJsonAsync<List<ApplicationModule>>($"api/user/{userId}/modules");
                if (modules != null)
                {
                    user.UserModules = modules.Select(m => new UserModule 
                    {
                        Module = m,
                        ModuleId = m.Id,
                        UserId = userId,
                        State = UserModuleState.NotStarted
                    }).ToList();
                    
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het verversen van de modules."));
        }
    }
}
