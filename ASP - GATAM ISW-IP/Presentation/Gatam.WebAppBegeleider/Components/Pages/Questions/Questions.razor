@* @page "/questions"

@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.Domain
@using WebAppBegeleider.Extensions
@using System.Diagnostics

@inject ApiClient apiClient
@inject AuthenticationStateProvider authenticationStateProvider

@rendermode InteractiveServer


@* @attribute [Authorize(Policy = "RequireMakerRole")] *@

<style>
    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }
</style>

<Modal @ref="modal" Title="Nieuwe vraag aanmaken.">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit" novalidate>
            <DataAnnotationsValidator />

            <div class="form-group row mb-3">
                <label class="col-md-2 col-form-label">Vraag: <span class="text-danger">*</span></label>
                <div class="col-md-10">
                    <InputText class="form-control" @bind-Value="newQuestion.QuestionTitle" Placeholder="Wie zou je zijn zonder angsten?" />
                    <ValidationMessage For="@(() => newQuestion.QuestionTitle)" />
                </div>
            </div>
            <div class="form-group row mb-3">
                <label class="col-md-2 col-form-label">Type vraag:<span class="text-danger">*</span></label>
                <div class="col-md-10">
                    <InputSelect @bind-Value="selectedOption" class="form-control">
                        <option value="@QuestionType.MULTIPLE_CHOICE">Meerkeuzevraag</option>
                        <option value="@QuestionType.CHOICE_LIST">Keuzevraag</option>
                        <option value="@QuestionType.OPEN">Open vraag</option>
                        <option value="@QuestionType.TRUE_OR_FALSE">Waar / onwaar vraag</option>
                    </InputSelect>
                </div>
            </div>
            <hr />

            @if(selectedOption == QuestionType.OPEN)
            {
                <div class="form-group row mb-3">
                    <p class="text-center">Je hebt gekozen voor een open vraag. Je moet geen mogelijke antwoorden meegeven.</p>
                </div>
                <input type="text" value="OPEN" hidden bind-Value="@newQuestion.Answers.FirstOrDefault().AnswerValue" />
                <ValidationMessage For="@(() => newQuestion.Answers)" />
            }
            @if (selectedOption == QuestionType.TRUE_OR_FALSE)
            {
                <div class="form-group row mb-3">
                    <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                    <div class="col-md-10">
                        <InputSelect @bind-Value="newQuestion.Answers.FirstOrDefault().AnswerValue" class="form-control">
                            <option value="true">Waar</option>
                            <option value="false">Onwaar</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newQuestion.Answers)" />
                    </div>
                </div>
            }
            @if (selectedOption == QuestionType.MULTIPLE_CHOICE)
            {
                <div class="form-group row mb-3">
                    <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                    <div class="col-md-10">
                        <InputText class="form-control" @bind-Value="newQuestion.QuestionTitle" Placeholder="Wie zou je zijn zonder angsten?" />
                        <ValidationMessage For="@(() => newQuestion.Answers)" />
                    </div>
                </div>
            }

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="ResetForm">Verwijder data</Button>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end me-2" Disabled="@isLoading">
                        @if(isLoading)
                        {
                            <Spinner Type="SpinnerType.Dots" />
                        } else
                        {
                            <span>Aanmaken</span>
                        }
                    </Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>
<CustomCards>
    <h3>Vragen</h3>
    <div class="d-flex p-2 justify-content-between">
        <AutoComplete @ref="search"
                      @bind-Value="searchValue"
                      TItem="Question"
                      DataProvider="QuestionSearchDataProvider"
                      PropertyName="QuestionTitle"
                      Placeholder="Zoek een vraag..."
                      OnChanged="(Question question) => OnAutoCompleteChanged(question)" />
        <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">
            <Icon Name="IconName.Plus"/>
            Nieuwe vraag
        </Button>    
    </div>
 <Grid TItem="Question"
     @ref="questionGrid"
        AllowRowClick="true"
        AllowSorting="true"
        Class="table table-hover"
        AllowPaging="true"
        Data="questions"
        PageSize="10"
        HeaderRowCssClass="custom-header"
        Responsive="true">
        <GridColumns>
            <GridColumn TItem="Question" HeaderText="Vraag:" PropertyName="QuestionTitle" SortString="QuestionTitle" SortKeySelector="item => item.QuestionTitle">
                @context.QuestionTitle
            </GridColumn>
            <GridColumn TItem="Question" HeaderText="Type:" PropertyName="QuestionType" SortString="QuestionType" SortKeySelector="item => item.QuestionType">
                @((QuestionType)@context.QuestionType)
            </GridColumn>
            <GridColumn TItem="Question" HeaderText="Antwoord:" PropertyName="QuestionAnswer" SortString="QuestionTitle" SortKeySelector="item => item.QuestionAnswer">
                @context.QuestionAnswer
            </GridColumn>
            <GridColumn TItem="Question" HeaderText="Aangemaakt op:" PropertyName="CreatedAt" SortString="QuestionTitle" SortKeySelector="item => item.CreatedAt">
                <Tooltip Class="me-4" Title="@context.CreatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.CreatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
            </GridColumn>
            <GridColumn TItem="Question" HeaderText="Aangepast op:" PropertyName="LastUpdatedAt" SortString="QuestionTitle" SortKeySelector="item => item.LastUpdatedAt">
                <Tooltip Class="me-4" Title="@context.LastUpdatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.LastUpdatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
            </GridColumn>

            <GridColumn TItem="Question" HeaderText="Actie" Filterable="false">
                <div>
                    <button type="button"
                            class="btn btn-outline-danger"
                    data-toggle="modal" data-target="#exampleModal" @onclick:stopPropagation>
                        <i class="bi bi-trash"></i>
                    </button>
            <a class="btn btn-outline-secondary" href="#" @onclick:stopPropagation>
                        <i class="bi bi-pencil"></i>
                    </a>
                </div>
            </GridColumn>
        </GridColumns>
    </Grid>
</CustomCards>


@code {
    private Modal? modal;
    private EditContext editContext;
    private AutoComplete<Question> search;
    private Question newQuestion = new Question();
    private QuestionType selectedOption = QuestionType.OPEN;
    private bool isLoading = false;
    private string searchValue;
    private List<Question> questions = new List<Question>();
    private Grid<Question> questionGrid = new Grid<Question>(); 

    [Inject] protected ToastService _toastService { get; set; } = default!;

    protected override async void OnInitialized()
    {
        editContext = new EditContext(newQuestion);
        newQuestion.QuestionAnswer = "OPEN";
        newQuestion.QuestionType = (short)selectedOption;

        questions = await apiClient.GetFromJsonAsync<List<Question>>("/api/question");
        questionGrid.Data = questions;
        questionGrid.RefreshDataAsync();
        base.OnInitialized();
    }

    public async Task HandleValidSubmit()
    {
        isLoading = true;
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        newQuestion.QuestionType = (short)selectedOption;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            string _userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            newQuestion.CreatedUserId = _userId;
            newQuestion.LastUpdatedUserId = _userId;
            try
            {

                newQuestion.LastUpdatedUserId = "123";
                newQuestion.ApplicationModuleId = null;
                HttpResponseMessage createQuestionResponse = await apiClient.PostAsJsonAsync<Question>("/api/question", newQuestion);

                if (createQuestionResponse.IsSuccessStatusCode)
                {
                    _toastService.Notify(new(ToastType.Success, "Je vraag is succesvol aangemaakt", $"Vraag gemaakt op {newQuestion.CreatedAt}"));
                    ResetForm();
                }
                else
                {
                    var errorResponse = await createQuestionResponse.Content.ReadFromJsonAsync<ValidationException>();

                    _toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van je vraag.", errorResponse.Title ?? createQuestionResponse.ReasonPhrase));
                }
            }
            catch (Exception e)
            {
                _toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van je vraag.", e.Message));
            }
            finally
            {
                Thread.Sleep(200);
                isLoading = false;
                updateTable();
            }
        } else
        {
            isLoading = false;
            _toastService.Notify(new(ToastType.Danger, "Geen gebruiker gevonden in de huidige context. Ben je ingelogd?", "Geen gebruiker id gevonden."));
            return; 
        }
    }

    private async Task<AutoCompleteDataProviderResult<Question>> QuestionSearchDataProvider(AutoCompleteDataProviderRequest<Question> request)
    {
        try
        {
            List<Question> getAllQuestionsResponse = await apiClient.GetFromJsonAsync<List<Question>>("/api/question");
            return await Task.FromResult(request.ApplyTo(getAllQuestionsResponse));
        }
        catch (Exception e)
        {
            _toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het ophalen van de vragen", e.Message));
            return await Task.FromResult(request.ApplyTo(new List<Question>()));
        }
    }

    public async Task<List<Question>> GetQuestions()
    {
        try
        {
            List<Question> getAllQuestionsResponse = await apiClient.GetFromJsonAsync<List<Question>>("/api/question");
            return getAllQuestionsResponse;
        }
        catch (Exception e)
        {
            _toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het ophalen van de vragen", e.Message));
            return new List<Question>();
        }
    }

    private void ResetForm()
    {
        newQuestion = new Question();
        editContext = new EditContext(newQuestion);
        selectedOption = QuestionType.OPEN;
        newQuestion.QuestionAnswer = "OPEN";
    }
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async void OnAutoCompleteChanged(Question question)
    {
        if(question != null)
        {
            questionGrid.Data = new List<Question>() { question };
        } else
        {
            questionGrid.Data = questions;
        }
        await questionGrid.RefreshDataAsync();
    }
    private async void updateTable()
    {
        questionGrid.Data = await apiClient.GetFromJsonAsync<List<Question>>("/api/question");
        await questionGrid.RefreshDataAsync();
    }
}
 *@