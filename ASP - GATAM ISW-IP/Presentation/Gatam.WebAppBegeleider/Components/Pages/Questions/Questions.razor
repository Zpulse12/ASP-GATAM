@page "/questions"

@using Gatam.Application.CQRS.DTOS.QuestionsDTO
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.Domain
@using WebAppBegeleider.Extensions

@inject ApiClient apiClient
@inject AuthenticationStateProvider authenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Vragen</PageTitle>

@attribute [Authorize(Policy = "RequireMakerRole")]
<link href="/css/questions.css" rel="stylesheet" />

<div class="questions-container">
    <div class="page-header">
        <h3>Vragen</h3>
    </div>

    <div class="actions-container">
        <div class="search-box">
            <AutoComplete @ref="search"
                @bind-Value="searchValue"
                          TItem="QuestionDTO"
                DataProvider="QuestionSearchDataProvider"
                PropertyName="QuestionTitle"
                Placeholder="Zoek een vraag..."
                          OnChanged="(QuestionDTO question) => OnAutoCompleteChanged(question)" />
        </div>
        <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">
            <Icon Name="IconName.Plus"/>
            Nieuwe vraag
        </Button>    
    </div>

    <Grid TItem="QuestionDTO"
    @ref="questionGrid"
    AllowRowClick="true"
    AllowSorting="true"
    Class="table table-hover"
    AllowPaging="true"
    Data="questions"
    PageSize="10"
    HeaderRowCssClass="custom-header"
    Responsive="true">
        <GridColumns>
            <GridColumn TItem="QuestionDTO" HeaderText="Vraag:" PropertyName="QuestionTitle" SortString="QuestionTitle" SortKeySelector="item => item.QuestionTitle">
                @context.QuestionTitle
            </GridColumn>
            <GridColumn TItem="QuestionDTO" HeaderText="Type:" PropertyName="QuestionType" SortString="QuestionType" SortKeySelector="item => item.QuestionType">
                @((QuestionType)@context.QuestionType)
            </GridColumn>
            @*           <GridColumn TItem="Question" HeaderText="Antwoord:" PropertyName="QuestionAnswer" SortString="QuestionTitle" SortKeySelector="item => item.QuestionAnswer">
                @context.QuestionAnswer
            </GridColumn> *@
            <GridColumn TItem="QuestionDTO" HeaderText="Aangemaakt op:" PropertyName="CreatedAt" SortString="QuestionTitle" SortKeySelector="item => item.CreatedAt">
                <Tooltip Class="me-4" Title="@context.CreatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.CreatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
            </GridColumn>
            <GridColumn TItem="QuestionDTO" HeaderText="Aangepast op:" PropertyName="LastUpdatedAt" SortString="QuestionTitle" SortKeySelector="item => item.LastUpdatedAt">
                <Tooltip Class="me-4" Title="@context.LastUpdatedAt.ToString("dd MMMM yyyy HH:mm")" Placement="TooltipPlacement.Right">@context.LastUpdatedAt.ToString("dd-MM-yyyy HH:mm")</Tooltip>
            </GridColumn>

            <GridColumn TItem="QuestionDTO" HeaderText="Actie" Filterable="false">
                <div>
                    <button type="button"
                    class="btn btn-outline-danger"
                    data-toggle="modal" data-target="#exampleModal" @onclick:stopPropagation>
                        <i class="bi bi-trash"></i>
                    </button>
                    <a class="btn btn-outline-secondary" href="/question/@(context.Id)" @onclick:stopPropagation>
                        <i class="bi bi-pencil"></i>
                    </a>
                </div>
            </GridColumn>
        </GridColumns>
    </Grid>
</div>

<Modal @ref="modal" Title="Nieuwe vraag aanmaken.">
    <BodyTemplate>
        <div class="modal-content">
            <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit" novalidate>
                <DataAnnotationsValidator />

                <div class="form-group row mb-3">
                    <label class="col-md-2 col-form-label">Vraag: <span class="text-danger">*</span></label>
                    <div class="col-md-10">
                        <InputText class="form-control" @bind-Value="newQuestion.QuestionTitle" Placeholder="Wie zou je zijn zonder angsten?" />
                        <ValidationMessage For="@(() => newQuestion.QuestionTitle)" />
                    </div>
                </div>
                <div class="form-group row mb-3">
                    <label class="col-md-2 col-form-label">Type vraag:<span class="text-danger">*</span></label>
                    <div class="col-md-10">
                        <InputSelect @bind-Value="selectedOption" class="form-control">
                            <option value="@QuestionType.MULTIPLE_CHOICE">Meerkeuzevraag</option>
                            <option value="@QuestionType.CHOICE_LIST">Keuzevraag</option>
                            <option value="@QuestionType.OPEN">Open vraag</option>
                            <option value="@QuestionType.TRUE_OR_FALSE">Waar / onwaar vraag</option>
                        </InputSelect>
                    </div>
                </div>
                <hr />

                @if(selectedOption == QuestionType.OPEN)
                {
                    <div class="form-group row mb-3">
                        <p class="text-center">Je hebt gekozen voor een open vraag. Je moet geen mogelijke antwoorden meegeven.</p>
                    </div>
                }
                @if (selectedOption == QuestionType.TRUE_OR_FALSE)
                {
                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <InputSelect @bind-Value="currentAnswer.Answer" class="form-control">
                                <option value="true">Waar</option>
                                <option value="false">Onwaar</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => newQuestion.QuestionAnswers)" />
                        </div>
                    </div>
                }
                @if (selectedOption == QuestionType.MULTIPLE_CHOICE)
                {
                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <InputText class="form-control mb-3" @bind-Value="currentAnswer.Answer" />
                            <ValidationMessage For="@(() => currentAnswer.Answer)" />
                            <InputSelect @bind-Value="currentAnswer.AnswerValue" class="form-control mb-3">
                                <option value="true">Juist</option>
                                <option value="false">Onjuist</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-12 text-left">
                            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2 btn-sm" @onclick="AddAnswerToList"><Icon Name="IconName.Plus" /> Voeg toe</Button>
                        </div>
                    </div>
                    <Grid TItem="QuestionAnswerDTO"
                    @ref="answerGrid"
                    Class="table table-hover"
                    Data="answers"
                    HeaderRowCssClass="custom-header"
                    Responsive="true">
                        <GridColumns>
                            <GridColumn Context="AnswerContext" TItem="QuestionAnswerDTO" HeaderText="Antwoord:" PropertyName="Answer" SortString="Answer" SortKeySelector="item => item.Answer">
                                @AnswerContext.Answer
                            </GridColumn>
                            <GridColumn Context="AnswerContext" TItem="QuestionAnswerDTO" HeaderText="Correct:" PropertyName="AnswerValue" SortString="AnswerValue" SortKeySelector="item => item.AnswerValue">
                                @AnswerContext.AnswerValue
                            </GridColumn>
                            <GridColumn TItem="QuestionAnswerDTO" HeaderText="Actie" Filterable="false" Context="AnswerContext">
                                <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveAnswerFromList(AnswerContext)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </GridColumn>
                        </GridColumns>
                    </Grid>
                }
                @if (selectedOption == QuestionType.CHOICE_LIST)
                {
                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <InputText class="form-control mb-3" @bind-Value="currentAnswer.Answer" />
                            <ValidationMessage For="@(() => currentAnswer.Answer)" />
                            <InputSelect @bind-Value="currentAnswer.AnswerValue" class="form-control mb-3">
                                <option value="true">Juist</option>
                                <option value="false">Onjuist</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-12 text-left">
                            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2 btn-sm" @onclick="AddAnswerToList"><Icon Name="IconName.Plus" /> Voeg toe</Button>
                        </div>
                    </div>
                    <Grid TItem="QuestionAnswerDTO"
                    @ref="answerGrid"
                    Class="table table-hover"
                    Data="answers"
                    HeaderRowCssClass="custom-header"
                    Responsive="true">
                        <GridColumns>
                            <GridColumn Context="AnswerContext" TItem="QuestionAnswerDTO" HeaderText="Antwoord:" PropertyName="Answer" SortString="Answer" SortKeySelector="item => item.Answer">
                                @AnswerContext.Answer
                            </GridColumn>
                            <GridColumn Context="AnswerContext" TItem="QuestionAnswerDTO" HeaderText="Correct:" PropertyName="AnswerValue" SortString="AnswerValue" SortKeySelector="item => item.AnswerValue">
                                @AnswerContext.AnswerValue
                            </GridColumn>
                            <GridColumn TItem="QuestionAnswerDTO" HeaderText="Actie" Filterable="false" Context="AnswerContext">
                                <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveAnswerFromList(AnswerContext)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </GridColumn>
                        </GridColumns>
                    </Grid>
                }

                <div class="row">
                    <div class="col-md-12 text-right">
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="ResetForm">Verwijder data</Button>
                        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end me-2" Disabled="@isLoading">
                            @if(isLoading)
                            {
                                <Spinner Type="SpinnerType.Dots" />
                            } else
                            {
                                <span>Aanmaken</span>
                            }
                        </Button>
                    </div>
                </div>
            </EditForm>
        </div>
    </BodyTemplate>
</Modal>


@code {
    private Modal? modal;
    private EditContext editContext;
    private AutoComplete<QuestionDTO> search;
    private QuestionDTO newQuestion = new QuestionDTO();
    private QuestionType selectedOption = QuestionType.OPEN;
    private bool isLoading = false;
    private string searchValue;
    private List<QuestionDTO> questions = new List<QuestionDTO>();
    private List<QuestionAnswerDTO> answers = new List<QuestionAnswerDTO>();
    private Grid<QuestionDTO> questionGrid = new Grid<QuestionDTO>();
    private Grid<QuestionAnswerDTO> answerGrid = new Grid<QuestionAnswerDTO>();
    private QuestionAnswerDTO currentAnswer = new QuestionAnswerDTO();

    [Inject] protected ToastService toastService { get; set; } = default!;

    protected override async void OnInitialized()
    {
        editContext = new EditContext(newQuestion);
        newQuestion.QuestionType = (short)selectedOption;

        questions = await apiClient.GetFromJsonAsync<List<QuestionDTO>>("/api/question");
        questionGrid.Data = questions;
        questionGrid.RefreshDataAsync();
        selectedOption = QuestionType.OPEN;

        currentAnswer.Answer = "true";
        currentAnswer.QuestionId = newQuestion.Id;

        base.OnInitialized();
    }

    public async Task HandleValidSubmit()
    {
        isLoading = true;
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        newQuestion.QuestionType = (short)selectedOption;

        if ((QuestionType)newQuestion.QuestionType == QuestionType.TRUE_OR_FALSE)
        {
            answers.Add(currentAnswer);
        }
        if((QuestionType)newQuestion.QuestionType == QuestionType.OPEN)
        {
            answers.Add(currentAnswer);
        }
        newQuestion.QuestionAnswers = answers;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            string userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            newQuestion.CreatedUserId = userId;
            newQuestion.LastUpdatedUserId = userId;
            try
            {
                newQuestion.ApplicationModuleId = null;
                HttpResponseMessage createQuestionResponse = await apiClient.PostAsJsonAsync<QuestionDTO>("/api/question", newQuestion);

                if (createQuestionResponse.IsSuccessStatusCode)
                {
                    toastService.Notify(new(ToastType.Success, "Je vraag is succesvol aangemaakt", $"Vraag gemaakt op {newQuestion.CreatedAt}"));
                    ResetForm();
                }
                else
                {
                    ValidationException errorResponse = await createQuestionResponse.Content.ReadFromJsonAsync<ValidationException>();
                    string errors = errorResponse?.Failures != null ? String.Join(",", errorResponse.Failures.Select(f => $"{f.ErrorMessage}")) : createQuestionResponse.ReasonPhrase;
                    toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van je vraag.", errors));
                }
            }
            catch (Exception e)
            {
                toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van je vraag.", e.Message));
            }
            finally
            {
                Thread.Sleep(200);
                isLoading = false;
                UpdateTable();
            }
        } else
        {
            isLoading = false;
            toastService.Notify(new(ToastType.Danger, "Geen gebruiker gevonden in de huidige context. Ben je ingelogd?", "Geen gebruiker id gevonden."));
            return; 
        }
    }

    private async Task<AutoCompleteDataProviderResult<QuestionDTO>> QuestionSearchDataProvider(AutoCompleteDataProviderRequest<QuestionDTO> request)
    {
        try
        {
            List<QuestionDTO> getAllQuestionsResponse = await apiClient.GetFromJsonAsync<List<QuestionDTO>>("/api/question");
            return await Task.FromResult(request.ApplyTo(getAllQuestionsResponse));
        }
        catch (Exception e)
        {
            toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het ophalen van de vragen", e.Message));
            return await Task.FromResult(request.ApplyTo(new List<QuestionDTO>()));
        }
    }

    public async Task<List<QuestionDTO>> GetQuestions()
    {
        try
        {
            List<QuestionDTO> getAllQuestionsResponse = await apiClient.GetFromJsonAsync<List<QuestionDTO>>("/api/question");
            return getAllQuestionsResponse;
        }
        catch (Exception e)
        {
            toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het ophalen van de vragen", e.Message));
            return new List<QuestionDTO>();
        }
    }

    private void ResetForm()
    {
        newQuestion = new QuestionDTO();
        answers.Clear();
        QuestionAnswerDTO newAnswer = new QuestionAnswerDTO() { Answer = "OPEN", QuestionId = newQuestion.Id };
        answers.Append(newAnswer);
        currentAnswer = newAnswer;
        editContext = new EditContext(newQuestion);
        selectedOption = QuestionType.OPEN;
    }
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async void OnAutoCompleteChanged(QuestionDTO question)
    {
        if(question != null)
        {
            questionGrid.Data = new List<QuestionDTO>() { question };
        } else
        {
            questionGrid.Data = questions;
        }
        await questionGrid.RefreshDataAsync();
    }
    private async void UpdateTable()
    {
        questionGrid.Data = await apiClient.GetFromJsonAsync<List<QuestionDTO>>("/api/question");
        await questionGrid.RefreshDataAsync();
    }
    private async void AddAnswerToList()
    {
        if (string.IsNullOrWhiteSpace(currentAnswer.Answer))
        {
            toastService.Notify(new(ToastType.Warning, "Antwoord mag niet leeg zijn"));
            return;
        }
        answers.Add(new QuestionAnswerDTO() { Answer = currentAnswer.Answer, AnswerValue = currentAnswer.AnswerValue, QuestionId = newQuestion.Id });
        await answerGrid.RefreshDataAsync();
        currentAnswer = new QuestionAnswerDTO() { AnswerValue = "true" };
    }
    private async void RemoveAnswerFromList(QuestionAnswerDTO answer)
    {
        answers.Remove(answer);
        await answerGrid.RefreshDataAsync();
    }
}
