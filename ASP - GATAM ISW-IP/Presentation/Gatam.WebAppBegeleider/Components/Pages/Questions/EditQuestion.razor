@page "/question/{Id}"

@using Gatam.Domain
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using System.Diagnostics
@inject ApiClient apiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


@rendermode InteractiveServer

@attribute [Authorize(Policy = "RequireMakerRole")]

<Modal @ref="modal" Title="Annuleer het bewerken van de vraag">
    <BodyTemplate>
        @Message
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Ja</Button>
        <Button Color="ButtonColor.Success"@onclick="SaveQuestion">Wijzigingen opslaan</Button>
    </FooterTemplate>
</Modal>
<CustomCards>
    @if (_isLoading)
    {
        <div class="text-center">
            <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
        </div>
    }
    else if (questionBeingEdited != null)
    {
        
        <EditForm Model="questionBeingEdited" OnValidSubmit="SaveQuestion">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="Title" class="form-label">Titel</label>
                <InputText id="Title" class="form-control" @bind-Value="questionBeingEdited.QuestionTitle" />
                <ValidationMessage For="@(() => questionBeingEdited.QuestionTitle)" />
            </div>

            @if (questionBeingEdited.QuestionType == (short)QuestionType.MULTIPLE_CHOICE)
            {
                <div class="mb-3">
                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                        <div class="col-md-10">
                            <InputText class="form-control mb-3" @bind-Value="answerBeingEdited.Answer" />
                            <ValidationMessage For="@(() => answerBeingEdited.Answer)" />
                            <InputSelect @bind-Value="answerBeingEdited.AnswerValue" class="form-control mb-3">
                                <option value="true">Juist</option>
                                <option value="false">Onjuist</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-12 text-left">
                            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2 btn-sm" @onclick="AddAnswerToList"><Icon Name="IconName.Plus" /> Voeg toe</Button>
                        </div>
                    </div>
                </div>
                <Grid TItem="QuestionAnswer"
                      @ref="answerGrid"
                      Class="table table-hover"
                      Data="answers"
                      HeaderRowCssClass="custom-header"
                      Responsive="true">
                    <GridColumns>
                        <GridColumn Context="AnswerContext" TItem="QuestionAnswer" HeaderText="Antwoord:" PropertyName="Answer" SortString="Answer" SortKeySelector="item => item.Answer">
                            @AnswerContext.Answer
                        </GridColumn>
                        <GridColumn Context="AnswerContext" TItem="QuestionAnswer" HeaderText="Correct:" PropertyName="AnswerValue" SortString="AnswerValue" SortKeySelector="item => item.AnswerValue">
                            @AnswerContext.AnswerValue
                        </GridColumn>
                        <GridColumn TItem="QuestionAnswer" HeaderText="Actie" Filterable="false" Context="AnswerContext">
                            <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveAnswerFromList(AnswerContext)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </GridColumn>
                    </GridColumns>
                </Grid>
            }
 
            else if (questionBeingEdited.QuestionType == (short)QuestionType.TRUE_OR_FALSE)
            {
                <div class="form-group row mb-3">
                    <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                    <div class="col-md-10">
                        <InputSelect @bind-Value="answerBeingEdited.Answer" class="form-control">
                            <option value="true">Waar</option>
                            <option value="false">Onwaar</option>
                        </InputSelect>
                    </div>
                </div>
            }
            else if (questionBeingEdited.QuestionType == (short)QuestionType.CHOICE_LIST)
            {
                <div class="form-group row mb-3">
                    <label class="col-md-2 col-form-label">Antwoord:<span class="text-danger">*</span></label>
                    <div class="col-md-10">
                        <InputText class="form-control mb-3" @bind-Value="answerBeingEdited.Answer" />
                        <ValidationMessage For="@(() => answerBeingEdited.Answer)" />
                        <InputSelect @bind-Value="answerBeingEdited.AnswerValue" class="form-control mb-3">
                            <option value="true">Juist</option>
                            <option value="false">Onjuist</option>
                        </InputSelect>
                    </div>
                    <div class="col-md-12 text-left">
                        <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end me-2 btn-sm" @onclick="AddAnswerToList"><Icon Name="IconName.Plus" /> Voeg toe</Button>
                    </div>
                </div>

                <Grid TItem="QuestionAnswer"
                      @ref="answerGrid"
                      Class="table table-hover"
                      Data="answers"
                      HeaderRowCssClass="custom-header"
                      Responsive="true">
                    <GridColumns>
                        <GridColumn Context="AnswerContext" TItem="QuestionAnswer" HeaderText="Antwoord:" PropertyName="Answer" SortString="Answer" SortKeySelector="item => item.Answer">
                            @AnswerContext.Answer
                        </GridColumn>
                        <GridColumn Context="AnswerContext" TItem="QuestionAnswer" HeaderText="Correct:" PropertyName="AnswerValue" SortString="AnswerValue" SortKeySelector="item => item.AnswerValue">
                            @AnswerContext.AnswerValue
                        </GridColumn>
                        <GridColumn TItem="QuestionAnswer" HeaderText="Actie" Filterable="false" Context="AnswerContext">
                            <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveAnswerFromList(AnswerContext)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </GridColumn>
                    </GridColumns>
                </Grid>
            }
                    <button type="submit" class="btn btn-primary">Opslaan</button>
            <button type="button" class="btn btn-danger" @onclick="OnShowModalClick">Annuleren</button>


                </EditForm>
            }
            else
            {
                <div class="alert alert-danger">
                    Vraag niet gevonden.
                </div>
            }
           


</CustomCards>

@code {
    private Modal? modal;
    [Parameter] public string Id { get; set; } = "";
    private Question questionBeingEdited;
    private QuestionAnswer answerBeingEdited;
    private List<QuestionAnswer> answers = new List<QuestionAnswer>();
    private Grid<QuestionAnswer> answerGrid = new Grid<QuestionAnswer>();
    private Question newQuestion = new Question();

    [Inject] protected ToastService toastService { get; set; } = default!;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> OnConfirm { get; set; }
    [Parameter] public string Message { get; set; } = "Weet u zeker dat u wilt annuleren zonder uw wijzigingen op te slaan?";


    private bool isSuccess = false;
    private bool _hasError = false;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        try
        {
            answerBeingEdited = new QuestionAnswer { AnswerValue = "true" };
            questionBeingEdited = await apiClient.GetFromJsonAsync<Question>($"/api/question/{Id}");
            if (questionBeingEdited == null)
            {
                _hasError = true;
                toastService.Notify(new(ToastType.Danger, "Vraag niet gevonden."));

            }
            else
            {
                answers = questionBeingEdited.Answers?.ToList() ?? new List<QuestionAnswer>();
                answerGrid.Data = answers;


                if (questionBeingEdited.QuestionType == (short)QuestionType.CHOICE_LIST)
                {
                    answers = questionBeingEdited.Answers?.ToList() ?? new List<QuestionAnswer>();
                }
                else if (questionBeingEdited.QuestionType == (short)QuestionType.MULTIPLE_CHOICE)
                {
                    answers = questionBeingEdited.Answers?.ToList() ?? new List<QuestionAnswer>();
                }
                else if (questionBeingEdited.QuestionType == (short)QuestionType.TRUE_OR_FALSE)
                {
                    var trueFalseAnswer = questionBeingEdited.Answers?.FirstOrDefault();
                    if (trueFalseAnswer != null)
                    {
                        answerBeingEdited.Answer = trueFalseAnswer.Answer;
                        answerBeingEdited.AnswerValue = trueFalseAnswer.AnswerValue;
                    }
                    else
                    {
                        answerBeingEdited = new QuestionAnswer { AnswerValue = "true" };
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _hasError = true;
            toastService.Notify(new(ToastType.Warning, "Er is een fout opgetreden bij het ophalen van de vraag."));

        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SaveQuestion()
    {
        _isLoading = true;
        try
        {
            if (questionBeingEdited.QuestionType == (short)QuestionType.TRUE_OR_FALSE)
            {

                answers = new List<QuestionAnswer>
            {
                new QuestionAnswer
                {
                    Answer = answerBeingEdited.Answer,
                    AnswerValue = answerBeingEdited.AnswerValue,
                    QuestionId = questionBeingEdited.Id
                }
            };
            }
            questionBeingEdited.Answers = answers;

            var response = await apiClient.PutAsJsonAsync($"/api/question/{questionBeingEdited.Id}", questionBeingEdited);

            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                toastService.Notify(new(ToastType.Success, "Vraag succesvol opgeslagen.", $"Vraag bewerkt op {newQuestion.LastUpdatedAt}"));
                StateHasChanged();

            }
            else
            {
                isSuccess = false;
                toastService.Notify(new(ToastType.Warning, "Er is een fout opgetreden bij het opslaan."));
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            toastService.Notify(new(ToastType.Warning, "Er is een onverwachte fout opgetreden."));

        }
        finally
        {
            _isLoading = false;
        }
    }


    private async void AddAnswerToList()
    {
        if (string.IsNullOrWhiteSpace(answerBeingEdited.Answer))
        {
            toastService.Notify(new(ToastType.Warning, "Antwoord mag niet leeg zijn"));
            return; 
        }
        answers.Add(new QuestionAnswer() { Answer = answerBeingEdited.Answer, AnswerValue = answerBeingEdited.AnswerValue, QuestionId = newQuestion.Id });
        await answerGrid.RefreshDataAsync();
        answerBeingEdited = new QuestionAnswer() { AnswerValue = "true" };
    }
    private async void RemoveAnswerFromList(QuestionAnswer answer)
    {
        answers.Remove(answer);
        await answerGrid.RefreshDataAsync();
    }


    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        Navigation.NavigateTo("/questions");
    }
}

