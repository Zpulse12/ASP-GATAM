@page "/admin/create"
@inject IHttpClientFactory HttpClientFactory
@using Gatam.Domain
@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Infrastructure.Repositories
@using System.Diagnostics;

@rendermode InteractiveServer

@inject ApiClient apiClient


@attribute [Authorize(Policy = "RequireManagementRole")]
<InactiveUserRedirect />
<div class="container mt-3">
    @if (isSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @response
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

</div>
<CustomCards>
    <h3 style="">Maak gebruiker aan!</h3>

    <EditForm Model="@user" FormName="createUser" OnValidSubmit="@OnFormSubmit">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="Name">Naam <span class="text-danger">*</span></label>
                <InputText id="Name" @bind-Value="user.Name" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Name)" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="Surname">Achternaam <span class="text-danger">*</span></label>
                <InputText id="Surname" @bind-Value="user.Surname" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Surname)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="Email">E-mailadres <span class="text-danger">*</span></label>
                <InputText id="Email" @bind-Value="user.Email" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="Username">Gebruikersnaam <span class="text-danger">*</span></label>
                <InputText id="Username" @bind-Value="user.Username" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="Password">Wachtwoord <span class="text-danger">*</span></label>
                <InputText id="Password" @bind-Value="user.PasswordHash" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.PasswordHash)" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="PhoneNumber">Gsm-nummer <span class="text-danger">*</span></label>
                <InputText id="PhoneNumber" @bind-Value="user.PhoneNumber" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.PhoneNumber)" />

            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label>
                    <InputCheckbox @bind-Value="isFollowerRoleSelected" />
                    Volger
                </label>
            </div>
        </div>

        <div class="row">
            <div class="text-center">
                <button class="w-25 btn rounded-pill" style="background-color:#4454D2; color:white" type="submit" >Aanmaken</button>
            </div>

        </div>
        
    </EditForm>
</CustomCards>

@code {
    string response = "";
    bool isSuccess = false;

    UserDTO user = new UserDTO();
    private bool isFollowerRoleSelected = true;


    private async Task OnFormSubmit() 
    {


        user.RolesIds = isFollowerRoleSelected ? new List<string> { RoleMapper.Roles["VOLGER"] } : new List<string>();

        var result = await apiClient.PostAsJsonAsync("/api/user", user);
        if(result.IsSuccessStatusCode)
        {

            var createdUser = await result.Content.ReadFromJsonAsync<UserDTO>();

            if (createdUser != null)
            {
                if (!string.IsNullOrWhiteSpace(createdUser?.Id) && createdUser.RolesIds?.Any() == true)
                {
                    await apiClient.PutAsJsonAsync($"/api/user/{createdUser.Id}/roles", createdUser);
                }
                else
                {
                    isSuccess = false;
                    response = "Er trad een fout op bij het ophalen van de aangemaakte gebruiker-ID.";
                }

                isSuccess = true;
                response = "Gebruiker is aangemaakt.";
                user = new UserDTO();
            }
            else
            {
                isSuccess = false;
                response = "Er trad een fout op bij het ophalen van de aangemaakte gebruiker.";

            }
        } else
        {
            isSuccess = false;
            response = "Niet goed";
            response = await result.Content.ReadAsStringAsync();

        }
        StateHasChanged();
    }
}