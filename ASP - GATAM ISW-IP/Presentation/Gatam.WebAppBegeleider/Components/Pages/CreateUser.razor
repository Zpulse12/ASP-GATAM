@page "/admin/create"
@inject IHttpClientFactory HttpClientFactory
@using Gatam.Domain
@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Infrastructure.Repositories
@using System.Diagnostics;

@rendermode InteractiveServer

@inject ApiClient apiClient
@inject AuthenticationStateProvider authenticationStateProvider


@attribute [Authorize(Policy = "RequireManagementRole")]
<InactiveUserRedirect />

<CustomCards>
    <h3 style="">Maak gebruiker aan!</h3>

    <EditForm Model="@user" FormName="createUser">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="Name">Naam <span class="text-danger">*</span></label>
                <InputText id="Name" @bind-Value="user.Name" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Name)" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="Surname">Achternaam <span class="text-danger">*</span></label>
                <InputText id="Surname" @bind-Value="user.Surname" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Surname)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="Email">E-mailadres <span class="text-danger">*</span></label>
                <InputText id="Email" @bind-Value="user.Email" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="Password">Wachtwoord <span class="text-danger">*</span></label>
                <InputText id="Password" @bind-Value="user.PasswordHash" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.PasswordHash)" />
            </div>
        </div>
        <div class="row">
            <div class="text-center">
                <label for="PhoneNumber">Gsm-nummer <span class="text-danger">*</span></label>
                <InputText id="PhoneNumber" @bind-Value="user.PhoneNumber" class="form-control rounded-pill" />
                <ValidationMessage For="@(() => user.PhoneNumber)" />
            </div>
        </div>
        <div class="row mb-3 mt-3">
            <div class="col-md-6">
                <label>
                    <InputCheckbox @bind-Value="isFollowerRoleSelected" />
                    Volger
                </label>
            </div>
            @* <AuthorizeView Roles="@RoleMapper.Roles[CustomRoles.BEGELEIDER]">
                <Authorized Context="AuthorizationContext">
                    <div class="col-md-6">
                        <label>
                            <InputCheckbox @bind-Value="isAddedToUserSelected" />
                            Wijs gebruiker aan mij toe
                        </label>
                    </div>
                </Authorized>
            </AuthorizeView> *@
        </div>

        <div class="row">
            <div class="text-center">
                <button class="w-25 btn rounded-pill" style="background-color:#4454D2; color:white" type="submit" onclick="@OnFormSubmit">Aanmaken</button>
            </div>

        </div>
        
    </EditForm>
</CustomCards>

@code {
    string response = "";
    bool isSuccess = false;

    UserDTO user = new UserDTO();
    private bool isFollowerRoleSelected = true;
    private bool isAddedToUserSelected = false;

    [Inject] protected ToastService toastService { get; set; } = default!;

    private async Task OnFormSubmit() 
    {
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal authUser = authState.User;

        if (authUser.Identity != null && authUser.Identity.IsAuthenticated && RoleMapper.Roles.TryGetValue(CustomRoles.VOLGER, out var volgerRoleId))
        {
            user.RolesIds = isFollowerRoleSelected ? new List<string> { volgerRoleId.Name } : new List<string>();
            user.Username = user.Email.Split('@')[0];

            if(isAddedToUserSelected)
            {
                string userId = authUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                user.BegeleiderId = userId;
            }
            try
            {
                var result = await apiClient.PostAsJsonAsync<UserDTO>("/api/user", user);
                if(result.IsSuccessStatusCode)
                {
                    var createdUser = await result.Content.ReadFromJsonAsync<UserDTO>();
                    toastService.Notify(new(ToastType.Success, "Je gebruiker is succesvol aangemaakt", $"Met id {createdUser.Id}"));
                } else
                {
                    ValidationException errorResponse = await result.Content.ReadFromJsonAsync<ValidationException>();
                    string errors = errorResponse?.Failures != null ? String.Join(",", errorResponse.Failures.Select(f => $"{f.ErrorMessage}")) : result.ReasonPhrase;
                    toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van de gebruiker.", errors));
                }
            } catch(Exception e)
            {
                toastService.Notify(new(ToastType.Danger, "Er ging iets mis met het aanmaken van de gebruiker", e.Message));
            } finally
            {
                user = new UserDTO();
                StateHasChanged();
            }
        } else
        {
            toastService.Notify(new(ToastType.Danger, "Geen gebruiker gevonden in de huidige context. Ben je ingelogd?", "Geen gebruiker id gevonden."));
            return;
        }
    }
}