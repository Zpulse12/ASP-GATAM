@page "/admin/create"
@inject IHttpClientFactory HttpClientFactory
@using Gatam.Application.CQRS
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions

@rendermode InteractiveServer

@inject ApiClient apiClient
@inject AuthenticationStateProvider authenticationStateProvider

@attribute [Authorize(Policy = "RequireManagementRole")]
<InactiveUserRedirect />

<div class="page-wrapper">
    <div class="banner">
        <div class="banner-content">
            <div class="banner-icon">
                <i class="bi bi-person-plus-fill"></i>
            </div>
            <div class="banner-text">
                <h3>Nieuwe Gebruiker Toevoegen</h3>
                <p>Vul het formulier in om een nieuwe gebruiker aan te maken</p>
            </div>
        </div>
    </div>

    <div class="content-container">
        <EditForm Model="@user" FormName="createUser" OnSubmit="OnFormSubmit">
            <DataAnnotationsValidator />
            
            <div class="form-row">
                <div class="form-group">
                    <label for="Name">
                        <i class="bi bi-person"></i>
                        Voornaam <span class="required">*</span>
                    </label>
                    <InputText id="Name" @bind-Value="user.Name" class="form-control" placeholder="Voer voornaam in..." />
                    <ValidationMessage For="@(() => user.Name)" />
                </div>
                <div class="form-group">
                    <label for="Surname">
                        <i class="bi bi-person"></i>
                        Achternaam <span class="required">*</span>
                    </label>
                    <InputText id="Surname" @bind-Value="user.Surname" class="form-control" placeholder="Voer achternaam in..." />
                    <ValidationMessage For="@(() => user.Surname)" />
                </div>
                <div class="form-group">
                    <label for="Email">
                        <i class="bi bi-envelope"></i>
                        E-mailadres <span class="required">*</span>
                    </label>
                    <InputText id="Email" @bind-Value="user.Email" class="form-control" placeholder="naam@voorbeeld.com" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="form-group">
                    <label for="PhoneNumber">
                        <i class="bi bi-phone"></i>
                        Gsm-nummer <span class="required">*</span>
                    </label>
                    <InputText id="PhoneNumber" @bind-Value="user.PhoneNumber" class="form-control" placeholder="+32 ..." />
                    <ValidationMessage For="@(() => user.PhoneNumber)" />
                </div>
                <div class="form-group">
                    <label for="Password">
                        <i class="bi bi-key"></i>
                        Wachtwoord <span class="required">*</span>
                    </label>
                    <div class="password-input">
                        <InputText 
                            type="@(showPassword ? "text" : "password")" 
                            id="Password" 
                            @bind-Value="user.PasswordHash" 
                            class="form-control" 
                            placeholder="Voer wachtwoord in..." 
                        />
                        <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
                            <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => user.PasswordHash)" />
                </div>
                <div class="form-group role-selection">
                    <label class="role-label">
                        <i class="bi bi-person-badge"></i>
                        Gebruikersrol
                    </label>
                    <div class="role-options">
                        <label class="role-card @(isFollowerRoleSelected ? "active" : "")">
                            <InputCheckbox @bind-Value="isFollowerRoleSelected" />
                            <i class="bi bi-person-follow"></i>
                            <span>Trajectvolger</span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn-cancel">
                    <i class="bi bi-x-lg"></i>
                    Annuleren
                </button>
                <button type="submit" class="btn-submit">
                    <i class="bi bi-person-plus"></i>
                    Gebruiker Aanmaken
                </button>
            </div>
        </EditForm>
    </div>
</div>

<link href="css/createuser.css" rel="stylesheet" />

@code {
    private string response = "";
    private bool isSuccess = false;
    private bool showPassword = false;
    private UserDTO user = new UserDTO();
    private bool isFollowerRoleSelected = true;
    private bool isAddedToUserSelected = false;
    private int currentStep = 1;

    [Inject] protected ToastService toastService { get; set; } = default!;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task OnFormSubmit() 
    {
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal authUser = authState.User;

        if (authUser.Identity != null && authUser.Identity.IsAuthenticated && RoleMapper.Roles.TryGetValue(CustomRoles.VOLGER, out var FollowerRoleId))
        {
            user.RolesIds = isFollowerRoleSelected ? new List<string> { FollowerRoleId.Name } : new List<string>();
            user.Username = user.Email.Split('@')[0];

            if(isAddedToUserSelected)
            {
                string userId = authUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                user.BegeleiderId = userId;
            }
            try
            {
                var result = await apiClient.PostAsJsonAsync<UserDTO>("/api/user", user);
                if(result.IsSuccessStatusCode)
                {
                    var createdUser = await result.Content.ReadFromJsonAsync<UserDTO>();
                    toastService.Notify(new(ToastType.Success, "Je gebruiker is succesvol aangemaakt", $"Met id {createdUser.Id}"));
                } else
                {
                    ValidationException errorResponse = await result.Content.ReadFromJsonAsync<ValidationException>();
                    string errors = errorResponse?.Failures != null ? String.Join(",", errorResponse.Failures.Select(f => $"{f.ErrorMessage}")) : result.ReasonPhrase;
                    toastService.Notify(new(ToastType.Warning, "Er ging iets mis bij het aanmaken van de gebruiker.", errors));
                }
            } catch(Exception e)
            {
                toastService.Notify(new(ToastType.Danger, "Er ging iets mis met het aanmaken van de gebruiker", e.Message));
            } finally
            {
                user = new UserDTO();
                StateHasChanged();
            }
        } else
        {
            toastService.Notify(new(ToastType.Danger, "Geen gebruiker gevonden in de huidige context. Ben je ingelogd?", "Geen gebruiker id gevonden."));
            return;
        }
    }

    private void GoToStep(int step)
    {
        if (step >= 1 && step <= 3)
        {
            currentStep = step;
        }
    }

    private void NextStep()
    {
        if (currentStep < 3)
        {
            currentStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
    }
}