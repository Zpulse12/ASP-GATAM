@page "/admin/user/{Id}"

@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS
@using Gatam.Infrastructure.Repositories
@using System.Diagnostics
@inject ManagementApiRepository managementApiRepository
@inject ApiClient apiClient

@rendermode InteractiveServer

@attribute [Authorize(Policy = "RequireManagementRole")]
<div class="container mt-3">
    @if (isSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @response_Msg
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

</div>
<CustomCards>
    <h3>Bewerken van gebruiker</h3>


    @if (_isLoading)
    {
        <p>Loading...</p>
    }
    else if (_hasError)
    {
        <p>@response_Msg</p>
    }
    else if (userBeingEdited != null)
    {
        <EditForm Model="userBeingEdited" OnValidSubmit="HandleValidSubmit" FormName="EditUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mt-3">
                <label for="Username">Gebruikersnaam</label>
                <InputText id="Username" @bind-Value="userBeingEdited.Username" class="form-control" />
            </div>

            <div class="form-group mt-3">
                <label for="Email">Email</label>
                <InputText id="Email" @bind-Value="userBeingEdited.Email" type="email" class="form-control" />
            </div>

            <div class="form-group mt-3">
                <label for="Role">Rol</label>
                @* <InputSelect @bind-Value="selectedRoles" class="form-control" multiple>
                    @foreach (var role in RoleMapper.Roles)
                    {
                        <option value="@role.Value">@role.Key</option>
                    }
                </InputSelect> *@

            </div>

            <div class="form-group mt-3">
                <label for="IsActive">Actief</label>
                <InputCheckbox id="IsActive" @bind-Value="userBeingEdited.IsActive" />
            </div>

            <button type="submit" class="btn btn-primary mt-4">Opslaan</button>

        </EditForm>

        <InputSelect  @bind-Value="selectedRoles" class="form-control" multiple>
            @foreach (var role in RoleMapper.Roles)
            {
                <option value="@role.Value">@role.Key</option>
            }
        </InputSelect>
        <button type="submit" onclick="@HandleValidSubmit" class="btn btn-primary mt-4">update role</button>

    }
    else
    {
        <p>Gebruiker niet gevonden.</p>
    }
</CustomCards>

@code {
    string response_Msg = "";
    bool isSuccess = false;
    [Parameter] public string Id { get; set; } = "";
    private IEnumerable<UserDTO> _users = default!;

    private UserDTO userBeingEdited ;

    private List<string> availableRoles = RoleMapper.Roles.Keys.ToList();

    public string selectedRoles { get; set; } = "";

    private bool _hasError = false;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        try
        {

            userBeingEdited = await apiClient.GetFromJsonAsync<UserDTO>($"/api/user/{Id}");
            if (userBeingEdited == null)
            {
                _hasError = true;
                response_Msg = "Gebruiker niet gevonden.";
                Console.WriteLine("Gebruiker is niet gevonden.");
            }
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;
            response_Msg = $"HTTP-fout: {ex.Message}";
            Console.WriteLine($"Request error: {ex.Message}");
            if (ex.StatusCode != null)
            {
                Console.WriteLine($"Status Code: {ex.StatusCode}");
            }
        }
        catch (Exception ex) 
        {
            _hasError = true;
            response_Msg = "Gebruiker niet gevonden3";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (userBeingEdited == null)
        {
            _hasError = true;
            response_Msg = "Geen gebruiker om te updaten.";
            return;
        }

        if (userBeingEdited != null)
        {
            try
            {

                userBeingEdited.RolesIds = new List<string>() {selectedRoles};

                Debug.WriteLine(userBeingEdited);

                var roleUpdateResponse = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}/roles", userBeingEdited); 

                if (roleUpdateResponse.IsSuccessStatusCode)
                {

                    var response = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}", userBeingEdited);

                    if (response.IsSuccessStatusCode)
                    {

                        Console.WriteLine("Gebruiker succesvol bijgewerkt.");
                        isSuccess = true;
                        response_Msg = "Gebruiker succesvol bijgewerkt.";
                        userBeingEdited = null; // Reset de bewerkte gebruiker
                        StateHasChanged();
                    }
                    else
                    {
                        Console.WriteLine($"Fout bij het bijwerken van de gebruiker: {response.ReasonPhrase}");
                        response_Msg = $"Fout bij het bijwerken van de gebruiker: {response.ReasonPhrase}";

                    }
                }
                else
                {
                    Console.WriteLine("Fout bij het bijwerken van de rollen.");
                    response_Msg = "Fout bij het bijwerken van de rollen.";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fout bij het bijwerken van de gebruiker: {ex.Message}");
                response_Msg = $"Fout bij het bijwerken van de gebruiker: {ex.Message}";

            }
        }
    }

    

}
