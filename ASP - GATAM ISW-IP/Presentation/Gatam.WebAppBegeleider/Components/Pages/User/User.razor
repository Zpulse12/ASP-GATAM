@page "/admin/user/{Id}"

@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS
@using Gatam.Infrastructure.Repositories
@using System.Diagnostics
@inject ManagementApiRepository managementApiRepository
@inject ApiClient apiClient

@rendermode InteractiveServer

@attribute [Authorize(Policy = "RequireManagementRole")]
<div class="container mt-3">
    @if (isSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @response_Msg
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

</div>
<CustomCards>
    <h3>Bewerken van gebruiker</h3>


    @if (_isLoading)
    {
        <div class="text-center">
            <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
        </div>
    }
    else if (_hasError)
    {
        <p>@response_Msg</p>
    }
    else if (userBeingEdited != null)
    {
        <div>
            <span>@userBeingEdited.Nickname</span>
            <button class="btn btn-primary mt-4" @onclick='() => ShowEditModal("Nickname")'>Bewerken</button>
            @if (isEditUsernameModalVisible)
            {
                <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Bewerken</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="edit-field">
                                    <EditForm Model="userBeingEdited" OnValidSubmit="HandleNicknameUpdate">
                                        <label for="Username">Gebruikersnaam</label>
                                        <InputText @bind-Value="userBeingEdited.Nickname" class="form-control" />
                                        <div class="modal-footer">
                                            <button type="submit" class="btn btn-outline-success">Opslaan</button>
                                            <button type="button" class="btn btn-outline-danger" @onclick="CloseModal">Annuleren</button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div> 
            }

        </div>

        <div>
            <span>@userBeingEdited.Email</span>
            <button class="btn btn-primary mt-4" @onclick='() => ShowEditModal("Email")'>Bewerken</button>
            @if (isEditEmailModalVisible)
            {
                <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Bewerken</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="edit-field">
                                    <EditForm Model="userBeingEdited" OnValidSubmit="HandleEmailUpdate">
                                        <InputText @bind-Value="userBeingEdited.Email" type="email" class="form-control" />
                                        <label for="Email">Email</label>
                                        <button type="submit" class="btn btn-outline-success">Opslaan</button>
                                        <button type="button" class="btn btn-outline-danger" @onclick="CloseModal">Annuleren</button>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            }
        </div>
       
        <Callout Color="CalloutColor.Info" Heading="Berlangrijk">
            <p><strong>@userBeingEdited.Nickname heeft momenteel volgende rol(len):</strong></p>
                <ul>
                    @if (userRolesMap.TryGetValue(userBeingEdited?.Id, out var roles))
                    {
                        foreach (var role in roles)
                        {
                            <li>@role</li>
                        }
                    }
                    else
                    {
                        <li>Geen rollen gevonden</li>
                    }
                </ul>
    
            <hr/>
        </Callout>
    <div class="form-group mt-3">
            <label for="Role">Rol Toewijzen</label>
            <InputSelect @bind-Value="selectedRoles" class="form-control" multiple>
                @foreach (var role in RoleMapper.Roles)
                {
                    <option value="@role.Value">@role.Key</option>
                }
            </InputSelect>
        </div>
        <button type="submit" onclick="@HandleValidSubmit" class="btn btn-primary mt-4">Opslaan</button>
    }
    else
    {
        <p>Gebruiker niet gevonden.</p>
    }
</CustomCards>


@code {
    [Parameter] public string Id { get; set; } = "";

    private Dictionary<string, List<string>> userRolesMap = new();
    private UserDTO selectedUser;
    public string selectedRoles { get; set; } = "";

    string response_Msg = "";
    bool isSuccess = false;
    private UserDTO userBeingEdited ;


    private bool _hasError = false;
    private bool _isLoading = true;

    private bool isEditUsernameModalVisible = false;
    private bool isEditEmailModalVisible = false;


    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {

            userBeingEdited = await apiClient.GetFromJsonAsync<UserDTO>($"/api/user/{Id}");
            if (userBeingEdited == null)
            {
                _hasError = true;
                response_Msg = "Gebruiker niet gevonden.";
            }
            var roles = await managementApiRepository.GetRolesByUserId(userBeingEdited.Id);
            userRolesMap[userBeingEdited.Id] = roles.ToList();
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;
            response_Msg = $"HTTP-fout: {ex.Message}";

        }
        catch (Exception ex) 
        {
            _hasError = true;
            response_Msg = "Gebruiker niet gevonden3";
        }finally
        {
            _isLoading = false;
        }


    }

    private async Task HandleValidSubmit()
    {
        if (userBeingEdited == null)
        {
            _hasError = true;
            response_Msg = "Geen gebruiker om te updaten.";
            return;
        }
        try
        {

            userBeingEdited.RolesIds = new List<string>() { selectedRoles };


            var roleUpdateResponse = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}/roles", userBeingEdited);

            if (roleUpdateResponse.IsSuccessStatusCode)
            {

                isSuccess = true;
                response_Msg = "Gebruiker succesvol bijgewerkt";
                StateHasChanged();
          
            }
            else
            {
                response_Msg = "Fout bij het bijwerken van de rollen.";
            }
        }
        catch (Exception ex)
        {
            response_Msg = $"Fout bij het bijwerken van de gebruiker: {ex.Message}";

        }
    }

    private void ShowEditModal(string field)
    {
        if (field == "Nickname")
        {
            isEditUsernameModalVisible = true;
        }
        if (field == "Email")
        {
            isEditEmailModalVisible = true;
        }
        StateHasChanged(); 
    }

    private void CloseModal()
    {
        isEditUsernameModalVisible = false;
        isEditEmailModalVisible = false;
        StateHasChanged(); 
    }

    private async Task HandleNicknameUpdate()
    {
        if (userBeingEdited == null)
        {
            _hasError = true;
            response_Msg = "Geen gebruiker om te updaten.";
            return;
        }
        try
        {
            var payload = new
            {
                nickname = userBeingEdited.Nickname,
                email = userBeingEdited.Email,
                username = userBeingEdited.Nickname,
                rolesIds = userBeingEdited.RolesIds,
                picture = userBeingEdited.Picture,
                id = userBeingEdited.Id
               
            };

            var response = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}", payload);
            Debug.WriteLine(response.ToString());

            if (response.IsSuccessStatusCode)
            {
                isSuccess=true;
                response_Msg = "Gebruikersnaam succesvol bijgewerkt.";
                isEditUsernameModalVisible = false;
                StateHasChanged();
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Debug.WriteLine($"Response content: {responseContent}");
                response_Msg = $"Fout bij het bijwerken van de gebruikersnaam: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            response_Msg = $"Error updating username: {ex.Message}";
        }
    }

    private async Task HandleEmailUpdate()
    {
        if (userBeingEdited == null)
        {
            _hasError = true;
            response_Msg = "Geen gebruiker om te updaten.";
            return;
        }

        try
        {
            var payload = new
            {
                nickname = userBeingEdited.Nickname,
                email = userBeingEdited.Email,
                rolesIds = userBeingEdited.RolesIds,
                picture = userBeingEdited.Picture,
                id = userBeingEdited.Id

            };

            var response = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}", payload);
            Debug.WriteLine(response.ToString());

            if (response.IsSuccessStatusCode)
            {
                isSuccess=true;
                response_Msg = "Email succesvol bijgewerkt.";
                isEditEmailModalVisible = false;
                StateHasChanged();
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Debug.WriteLine($"Response content: {responseContent}");
                response_Msg = "Fout bij het bijwerken van de email.";
            }
        }
        catch (Exception ex)
        {
            response_Msg = $"Error updating email: {ex.Message}";
        }
    }

   

        
}
