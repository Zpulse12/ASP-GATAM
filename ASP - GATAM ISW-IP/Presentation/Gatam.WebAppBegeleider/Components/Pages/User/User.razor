@page "/admin/user/{Id}"

@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@using Gatam.Application.CQRS
@using Gatam.Infrastructure.Repositories
@using System.Diagnostics
@inject ApiClient apiClient

@rendermode InteractiveServer

@attribute [Authorize(Policy = "RequireManagementRole")]
<div class="container mt-3">
    @if (isSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @response_Msg
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

</div>
<CustomCards>
    <h3 class="fw-bold text-muted me-2">Bewerken van gebruiker</h3>


    @if (_isLoading)
    {
        <div class="text-center">
            <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
        </div>
    }
    else if (_hasError)
    {
        <Callout Color="CalloutColor.Danger">
            <strong>Error:</strong> @response_Msg
        </Callout>
    }
    else if (userBeingEdited != null)
    {
        <div class="user-info-section">
            <div class="d-flex align-items-center mb-3">
                <span class="fw-bold text-muted me-2">@userBeingEdited.Username</span>
                <button class="btn btn-sm btn-custom" style="background-color:#4454D2; color:white" @onclick='() => ShowEditModal("Nickname")'>
                    <i class="bi bi-pencil-square me-1"></i> Bewerken
                </button>
            </div>
            @if (isEditUsernameModalVisible)
            {
                <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Bewerken</h5>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="userBeingEdited" OnValidSubmit="HandleNicknameUpdate">
                                    <div class="mb-3">
                                        <label for="Username" class="form-label">Gebruikersnaam</label>
                                        <InputText @bind-Value="userBeingEdited.Username" class="form-control" />
                                    </div>
                                    <div class="modal-footer">
                                        <button type="submit" class="btn btn-outline-success">Opslaan</button>
                                        <button type="button" class="btn btn-outline-danger" @onclick="CloseModal">Annuleren</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="d-flex align-items-center mb-3">
                <span class="fw-bold text-muted me-2">@userBeingEdited.Email</span>
                <button class="btn btn-sm btn-custom" style="background-color:#4454D2; color:white"  @onclick='() => ShowEditModal("Email")'>
                    <i class="bi bi-pencil-square me-1"></i> Bewerken
                </button>
            </div>
            @if (isEditEmailModalVisible)
            {
                <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" >Bewerken</h5>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="userBeingEdited" OnValidSubmit="HandleEmailUpdate">
                                    <div class="mb-3">
                                        <label for="Email" class="form-label">Email</label>
                                        <InputText @bind-Value="userBeingEdited.Email" type="email" class="form-control" />
                                    </div>
                                    <div class="modal-footer">
                                        <button type="submit" class="btn btn-outline-success">Opslaan</button>
                                        <button type="button" class="btn btn-outline-danger" @onclick="CloseModal">Annuleren</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <Callout Color="CalloutColor.Info" Heading="Belangrijk">
                <p><strong>@userBeingEdited.Username heeft momenteel volgende rol(len):</strong></p>
                <ul class="roles-list">
                    @if (userRolesMap.TryGetValue(userBeingEdited?.Id, out var roles))
                    {
                        foreach (var role in roles)
                        {
                            <li>@role</li>
                        }
                    }
                    else
                    {
                        <li>Geen rollen gevonden</li>
                    }
                </ul>
                <hr />
            </Callout>

            <div class="form-group mt-3">
                <label for="Role" class="fw-bold text-muted">Rol Toewijzen</label>
                <InputSelect @bind-Value="selectedRoles" class="form-control" multiple>
                    @foreach (var role in RoleMapper.Roles)
                    {
                        <option value="@role.Value">@role.Key</option>
                    }
                </InputSelect>
            </div>
            <button type="submit" onclick="@HandleValidSubmit" class="btn btn-sm btn-custom mt-4" style="background-color:#4454D2; color:white"><i class="bi bi-plus me-1"></i>Toewijzen</button>
        </div>

    }
    else
    {
        <p>Gebruiker niet gevonden.</p>
    }
</CustomCards>


@code {
    [Parameter] public string Id { get; set; } = "";

    private Dictionary<string, List<string>> userRolesMap = new();
    private UserDTO selectedUser;
    private string selectedRoles { get; set; } = "";

    string response_Msg = "";
    bool isSuccess = false;
    private UserDTO userBeingEdited ;


    private bool _hasError = false;
    private bool _isLoading = true;

    private bool isEditUsernameModalVisible = false;
    private bool isEditEmailModalVisible = false;


    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {

            userBeingEdited = await apiClient.GetFromJsonAsync<UserDTO>($"/api/user/{Id}");
            if (userBeingEdited == null)
            {
                _hasError = true;
                response_Msg = "Gebruiker niet gevonden.";
            }
            var roles = await apiClient.GetFromJsonAsync<List<string>>($"api/user/{userBeingEdited.Id}/roles");
            userRolesMap[userBeingEdited.Id] = roles;
            
        }
        catch (Exception ex)
        {
            _hasError = true;
            response_Msg = $"Fout bij het ophalen van de gebruiker";
            
        }
        finally
        {
            _isLoading = false;
        }


    }

    private async Task HandleValidSubmit()
    {
        if (userBeingEdited == null)
        {
            _hasError = true;
            response_Msg = "Geen gebruiker om te updaten.";
            return;
        }
        try
        {

            userBeingEdited.RolesIds = new List<string>() { selectedRoles };


            var roleUpdateResponse = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}/roles", userBeingEdited);

            if (roleUpdateResponse.IsSuccessStatusCode)
            {

                isSuccess = true;
                response_Msg = "Gebruiker succesvol bijgewerkt";
                StateHasChanged();
          
            }
            else
            {
                response_Msg = "Fout bij het bijwerken van de rollen.";
            }
        }
        catch (Exception ex)
        {
            response_Msg = $"Fout bij het bijwerken van de gebruiker: {ex.Message}";

        }
    }

    private void ShowEditModal(string field)
    {
        if (field == "Nickname")
        {
            isEditUsernameModalVisible = true;
        }
        if (field == "Email")
        {
            isEditEmailModalVisible = true;
        }
        StateHasChanged(); 
    }

    private void CloseModal()
    {
        isEditUsernameModalVisible = false;
        isEditEmailModalVisible = false;
        StateHasChanged(); 
    }

    private async Task UpdateUserPropertyAsync(string successMessage, string errorMessage, bool isModalVisible, Action onSuccess)
    {
        if (userBeingEdited == null)
        {
            _hasError = true;
            response_Msg = "Geen gebruiker om te updaten.";
            return;
        }

        try
        {
            var payload = new
            {
                // name = userBeingEdited.Name,
                // surname = userBeingEdited.Surname,
                username = userBeingEdited.Username,
                email = userBeingEdited.Email,
                rolesIds = userBeingEdited.RolesIds,
                picture = userBeingEdited.Picture,
                id = userBeingEdited.Id
            };

            var response = await apiClient.PutAsJsonAsync($"/api/user/{userBeingEdited.Id}", payload);
            Debug.WriteLine(response.ToString());

            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                response_Msg = successMessage;
                isModalVisible = false;
                onSuccess?.Invoke();
                StateHasChanged();
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Debug.WriteLine($"Response content: {responseContent}");
                response_Msg = $"{errorMessage}: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            response_Msg = $"Error: {ex.Message}";
        }
    }

    private async Task HandleNicknameUpdate()
    {
        await UpdateUserPropertyAsync(
            "Gebruikersnaam succesvol bijgewerkt.",
            "Fout bij het bijwerken van de gebruikersnaam",
            isEditUsernameModalVisible,
            () => isEditUsernameModalVisible = false
        );
    }

    private async Task HandleEmailUpdate()
    {
        await UpdateUserPropertyAsync(
            "Email succesvol bijgewerkt.",
            "Fout bij het bijwerken van de email",
            isEditEmailModalVisible,
            () => isEditEmailModalVisible = false
        );
    }


   

        
}
