@page "/AssignToBegeleider"
@inject ApiClient apiClient
@rendermode InteractiveServer
@using Gatam.Domain
@using Gatam.WebAppBegeleider.Components.Layout
@using Gatam.WebAppBegeleider.Extensions
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Policy = "RequireManagementRole")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<CustomCards>
    <h3>Mijn trajectvolgers</h3>
    <Grid TItem="ApplicationUser"
          Class="table table-hover"
          Data="@usersWithBegeleiderId"
          AllowPaging="true"
          PageSize="5"
          HeaderRowCssClass="custom-header"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="ApplicationUser" HeaderText="Username">
                @context.Username
            </GridColumn>
            <GridColumn TItem="ApplicationUser" HeaderText="Email">
                @context.Email
            </GridColumn>
            <GridColumn TItem="ApplicationUser" HeaderText="Toewijzing verwijderen">
                <button type="button" class="btn btn-outline-danger" @onclick="() => UnassignVolgerToBegeleider(context)">Verwijder</button>
            </GridColumn>
        </GridColumns>
    </Grid>

    <h3>Niet toegewezen trajectvolgers</h3>
    <Grid TItem="ApplicationUser"
          Class="table table-hover"
          Data="@usersWithoutBegeleiderId"
          AllowPaging="true"
          PageSize="5"
          HeaderRowCssClass="custom-header"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="ApplicationUser" HeaderText="Username">
                @context.Username
            </GridColumn>
            <GridColumn TItem="ApplicationUser" HeaderText="Email">
                @context.Email
            </GridColumn>
            <GridColumn TItem="ApplicationUser" HeaderText="Toewijzen">
                <button class="btn btn-primary" @onclick="() => AssignVolgerToBegeleider(context)">
                    Toewijzen
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>

</CustomCards>


@code {
    [Inject] protected ToastService toastService { get; set; } = default!;

    private List<ApplicationUser> usersWithBegeleiderId = new();
    private List<ApplicationUser> usersWithoutBegeleiderId = new();

    protected override async Task OnInitializedAsync()
    {
        var usersResponse = await apiClient.GetFromJsonAsync<List<ApplicationUser>>("api/user/AssignUsersToBegeleider");
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (usersResponse != null && usersResponse.Count > 0)
        {
            usersWithBegeleiderId = usersResponse
                .Where(u => u.BegeleiderId == userId)
                .ToList();

            usersWithoutBegeleiderId = usersResponse
                .Where(u => string.IsNullOrEmpty(u.BegeleiderId))
                .ToList();
        }
    }

    private async Task AssignVolgerToBegeleider(ApplicationUser user)
    {
        try 
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            var begeleiderId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(begeleiderId))
            {
                toastService.Notify(new(ToastType.Warning, "Gebruiker niet gevonden"));
                return;
            }

            var response = await apiClient.PutAsJsonAsync($"api/user/{begeleiderId}/AssignUsersToBegeleider", user);

            if (response.IsSuccessStatusCode)
            {
                usersWithoutBegeleiderId.Remove(user);
                usersWithBegeleiderId.Add(user);
                user.BegeleiderId = begeleiderId; 

                usersWithoutBegeleiderId = new List<ApplicationUser>(usersWithoutBegeleiderId);
                usersWithBegeleiderId = new List<ApplicationUser>(usersWithBegeleiderId);
                await InvokeAsync(StateHasChanged);

                toastService.Notify(new(ToastType.Success, "Gebruiker succesvol toegewezen!"));
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het toewijzen van de gebruiker."));
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het toewijzen van de gebruiker."));
        }
    }
    private async Task UnassignVolgerToBegeleider(ApplicationUser user)
    {
        try 
        {
            var response = await apiClient.PutAsJsonAsync($"api/user/UnassignUsersToBegeleider", user);

            if (response.IsSuccessStatusCode)
            {
                usersWithoutBegeleiderId.Add(user);
                usersWithBegeleiderId.Remove(user);
                user.BegeleiderId = null;
                
                usersWithoutBegeleiderId = new List<ApplicationUser>(usersWithoutBegeleiderId);
                usersWithBegeleiderId = new List<ApplicationUser>(usersWithBegeleiderId);
                
                await InvokeAsync(StateHasChanged);
                toastService.Notify(new(ToastType.Success, "Gebruiker succesvol verwijderd!"));
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het verwijderen van de gebruiker."));
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, "Er is een fout opgetreden bij het verwijderen van de gebruiker."));
        }
    }

   


}
