@page "/ModulesOfUser"
@using System.Security.Claims
@using Gatam.Application.CQRS.DTOS.ModulesDTO
@using Gatam.Domain
@using Gatam.WebAppVolger.Extensions
@using Gatam.WebAppVolger.Components.Layout
@inject ApiClient ApiClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireVolgersRole")]
<InactiveUserRedirect />

<h3>Mijn Modules</h3>

@if (_isLoading)
{
    <div class="text-center">
        <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else if (_hasError)
{
    <Callout Color="CalloutColor.Danger">
        <strong>Error:</strong> Er is een probleem opgetreden bij het ophalen van jouw modules.
    </Callout>
}
else if (_userModules != null && _userModules.Any())
{
    <div class="module-list">
        @foreach (var userModule in _userModules)
        {
            <div class="card mb-3" @onclick="() => NavigateToModule(userModule.Id)">
                <div class="card-body">
                    <h5>@userModule.Module.Title</h5>
                    <p>@userModule.Module.Category</p>
                </div>
            </div>
        }
    </div>
    
}
else
{
    <div class="text-center">
        <p>Geen modules gevonden voor jouw account.</p>
    </div>
}

@code {
    private List<UserModuleDTO> _userModules = new List<UserModuleDTO>();
    private bool _isLoading = true;
    private bool _hasError = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();
    }

    private async Task LoadUserModules()
    {
        _isLoading = true;
        try
        {
            AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                string? userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                {
                    _hasError = true;
                    return;
                }
                _userModules = await ApiClient.GetFromJsonAsync<List<UserModuleDTO>>($"/api/usermodule/user/{userId}/modules");
            }
            else
            {
                _hasError = true;
            }
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;
        }
        catch (Exception ex)
        {
            _hasError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToModule(string userModuleId)
    {
        NavigationManager.NavigateTo($"/ModuleDetails/{userModuleId}");
    }
}
