@page "/ModulesOfUser"
@using System.Security.Claims
@using Gatam.Application.CQRS.DTOS.ModulesDTO
@using Gatam.Domain
@using Gatam.WebAppVolger.Extensions
@using Gatam.WebAppVolger.Components.Layout
@inject ApiClient ApiClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireVolgersRole")]
<InactiveUserRedirect />
<div class="container mt-4">
    <h2 class="mb-4">Mijn Modules</h2>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
        </div>
    }
    else if (_hasError)
    {
        <div class="alert alert-danger text-center" role="alert">
            <strong>Error:</strong> Er is een probleem opgetreden bij het ophalen van jouw modules. Probeer het later opnieuw.
        </div>
    }
    else if (_userModules?.Any() == true)
    {
        <div class="row">
            @foreach (var userModule in _userModules)
            {
                <div class="col-md-4 col-sm-6 mb-4">
                    <div class="card h-100 shadow-lg border-0" style="background-color: #f9f9fc;" @onclick="() => NavigateToModule(userModule.Id)">
                        <div class="card-body">
                            <!-- Title -->
                            <h5 class="card-title text-primary font-weight-bold">@userModule.Module.Title</h5>

                            <!-- Category -->
                            <p class="card-text text-muted mb-3">@userModule.Module.Category</p>

                            @if (userModule.State != UserModuleState.NotStarted)
                            {
                                <!-- State -->
                                <p class="mb-1">
                                    <strong>Status:</strong>
                                    <span class="text-success">@userModule.State</span>
                                </p>

                                <!-- Visible Questions -->
                                <p class="mb-1">
                                    <strong>Visible Questions:</strong>
                                    <span class="badge bg-info text-dark">@userModule.UserQuestions?.Count(q => q.IsVisible)</span>
                                </p>

                                <p class="mb-1">
                                    <strong>Given Answers:</strong>
                                    <span class="badge bg-warning text-dark">@userModule.UserGivenAnswers?.Count()</span>
                                </p>

                                <p class="mb-3">
                                    <strong>Answered Percentage:</strong>
                                    <span class="badge bg-primary text-white">@CalculateAnsweredPercentage(userModule)%</span>
                                </p>

                                <div class="d-flex justify-content-between align-items-center">
                                    <Button Class="btn btn-sm btn-secondary text-white"
                                            @onclick="() => NavigateToModule(userModule.Id)">
                                        Klik hier voor meer
                                    </Button>

                                    <Badge Style="@GetBadgeStyle(userModule)"
                                           Color="BadgeColor.None"
                                           Class="module-badge badge bg-light text-dark border">
                                        @CalculateAnsweredPercentageLabel(userModule)
                                    </Badge>
                                </div>
                            }
                        </div>
                    </div>
                </div>

            }
        </div>
    }
    else
    {
        <div class="text-center mt-4">
            <p class="text-muted">Geen modules gevonden voor jouw account.</p>
        </div>
    }
</div>

@code {
    private List<UserModuleDTO> _userModules = new List<UserModuleDTO>();
    private bool _isLoading = true;
    private bool _hasError = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();

    }

    private async Task LoadUserModules()
    {
        _isLoading = true;
        try
        {
            AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                string? userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                {
                    _hasError = true;
                    return;
                }
                _userModules = await ApiClient.GetFromJsonAsync<List<UserModuleDTO>>($"/api/usermodule/user/{userId}/modules");
            }
            else
            {
                _hasError = true;
            }
        }
        catch (HttpRequestException ex)
        {
            _hasError = true;
        }
        catch (Exception ex)
        {
            _hasError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

   

    public double CalculateAnsweredPercentage(UserModuleDTO userModule)
    {
        var visibleQuestions = userModule.UserQuestions.Where(q => q.IsVisible).ToList();
        int answeredQuestionsCount = 0;

        foreach (var question in visibleQuestions)
        {
            bool isAnswered = false;
            foreach (var answer in question.Question.Answers)
            {
                if (isAnswered)
                    break;

                var matchingAnswer = userModule.UserGivenAnswers
                    .FirstOrDefault(uga => uga.QuestionAnswerId == answer.Id && !string.IsNullOrEmpty(uga.GivenAnswer));

                if (matchingAnswer != null)
                {
                    isAnswered = true;
                    answeredQuestionsCount++;
                }
            }
        }
        if (visibleQuestions.Count == 0)
            return 0;

        return (double)answeredQuestionsCount / visibleQuestions.Count * 100;
    }

    public string CalculateAnsweredPercentageLabel(UserModuleDTO userModule)
    {
        var percentage = CalculateAnsweredPercentage(userModule);
        return $"{percentage:0.##}%";
    }
    private string GetBadgeColor(UserModuleDTO userModule)
    {
        var percentage = CalculateAnsweredPercentage(userModule);

        if (percentage >= 80) return "#28a745"; // Groen (succes)
        if (percentage >= 50) return "#ffc107"; // Geel (waarschuwing)
        return "#dc3545"; // Rood (fout)
    }
    private string GetBadgeStyle(UserModuleDTO userModule)
    {
        var badgeColor = GetBadgeColor(userModule);
        return $"margin-right: 10px; width: 60px; background-color: {badgeColor};";
    }

     private void NavigateToModule(string userModuleId)
    {
        NavigationManager.NavigateTo($"/ModuleDetails/{userModuleId}");
    }

}
