@page "/ModulesOfUser"
@using System.Security.Claims
@using Gatam.Application.CQRS.DTOS.ModulesDTO
@using Gatam.Domain
@using Gatam.WebAppVolger.Extensions
@using Gatam.WebAppVolger.Components.Layout
@inject ApiClient ApiClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize(Policy = "RequireVolgersRole")]

<InactiveUserRedirect />
<link href="css/modules-of-user.css" rel="stylesheet" />

<div class="modules-container">
    <div class="modules-header">
        <div class="header-wrapper">
            <div class="header-content">
                <div class="header-icon">
                    <i class="bi bi-collection"></i>
                </div>
                <div class="header-text">
                    <h2>Mijn Modules</h2>
                    <p>Bekijk en beheer je toegewezen modules</p>
                </div>
            </div>
            <div class="search-box">
                <i class="bi bi-search"></i>
                <input type="text" 
                       placeholder="Zoek in modules..." 
                       @bind="searchTerm" 
                       @bind:event="oninput"
                       @onkeyup="HandleSearch" />
            </div>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <Spinner Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
        </div>
    }
    else if (_hasError)
    {
        <div class="alert alert-danger text-center" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            Er is een probleem opgetreden bij het ophalen van jouw modules. Probeer het later opnieuw.
        </div>
    }
    else if (_userModules?.Any() == true)
    {
        <div class="module-grid">
            @foreach (var userModule in GetPaginatedModules())
            {
                <div class="module-card" @onclick="() => NavigateToModule(userModule.Id)">
                    <div class="card-body">
                        <h3 class="module-title">@userModule.Module.Title</h3>
                        <div class="module-category">
                            <i class="bi bi-tag me-2"></i>@userModule.Module.Category
                        </div>

                        @if (userModule.State != Domain.UserModuleState.NotStarted)
                        {
                            <div class="progress-info">
                                <div class="info-item">
                                    <span class="info-label">Status</span>
                                    <span class="info-value @GetStateClass(userModule.State)">@GetStateText(userModule.State)</span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Vragen</span>
                                    <span class="info-value">@userModule.UserQuestions?.Count(q => q.IsVisible)</span>
                                </div>
                            </div>

                            <div class="module-footer">
                                <button class="btn-details">
                                    <i class="bi bi-arrow-right me-2"></i>Bekijk Module
                                </button>
                                <span class="progress-badge" style="@GetBadgeStyle(userModule)">
                                    @CalculateAnsweredPercentageLabel(userModule)
                                </span>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="pagination-container">
            <button class="btn-pagination" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                <i class="bi bi-chevron-left"></i>
            </button>
            <span class="page-info">@currentPage / @totalPages</span>
            <button class="btn-pagination" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        <div class="text-center mt-4">
            <i class="bi bi-inbox-fill text-muted" style="font-size: 3rem;"></i>
            <p class="text-muted mt-3">Je hebt nog geen modules toegewezen gekregen.</p>
        </div>
    }
</div>

@code {
    private List<UserModuleDTO> _userModules = new List<UserModuleDTO>();
    private bool _isLoading = true;
    private bool _hasError = false;
    private string searchTerm = "";
    private Timer? _debounceTimer;
    private List<UserModuleDTO> _originalUserModules = new();

    private const int PAGE_SIZE = 1;  // Gewoon 1 module per pagina, klaar
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling(_userModules.Count / (double)PAGE_SIZE);

    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();
    }

    private async Task LoadUserModules()
    {
        _isLoading = true;
        try
        {
            AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                string? userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                {
                    _hasError = true;
                    return;
                }
                _userModules = await ApiClient.GetFromJsonAsync<List<UserModuleDTO>>($"/api/usermodule/user/{userId}/modules");
                _originalUserModules = new List<UserModuleDTO>(_userModules);
            }
            else
            {
                _hasError = true;
            }
        }
        catch (Exception)
        {
            _hasError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        _debounceTimer?.Dispose();
        _debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                FilterModules();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void FilterModules()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            _userModules = _originalUserModules;
        }
        else
        {
            _userModules = _originalUserModules.Where(m =>
                m.Module.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                m.Module.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private List<UserModuleDTO> GetPaginatedModules()
    {
        return _userModules
            .Skip((currentPage - 1) * PAGE_SIZE)
            .Take(PAGE_SIZE)
            .ToList();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

    public double CalculateAnsweredPercentage(UserModuleDTO userModule)
    {
        var visibleQuestions = userModule.UserQuestions.Where(q => q.IsVisible).ToList();
        int answeredQuestionsCount = 0;

        foreach (var question in visibleQuestions)
        {
            bool isAnswered = false;
            foreach (var answer in question.Question.Answers)
            {
                if (isAnswered)
                    break;

                var matchingAnswer = userModule.UserGivenAnswers
                    .FirstOrDefault(uga => uga.QuestionAnswerId == answer.Id && !string.IsNullOrEmpty(uga.GivenAnswer));

                if (matchingAnswer != null)
                {
                    isAnswered = true;
                    answeredQuestionsCount++;
                }
            }
        }
        if (visibleQuestions.Count == 0)
            return 0;

        return (double)answeredQuestionsCount / visibleQuestions.Count * 100;
    }

    public string CalculateAnsweredPercentageLabel(UserModuleDTO userModule)
    {
        var percentage = CalculateAnsweredPercentage(userModule);
        return $"{percentage:0.##}%";
    }

    private string GetBadgeColor(UserModuleDTO userModule)
    {
        var percentage = CalculateAnsweredPercentage(userModule);

        if (percentage >= 80) return "#28a745";
        if (percentage >= 50) return "#ffc107";
        return "#dc3545";
    }

    private string GetBadgeStyle(UserModuleDTO userModule)
    {
        var badgeColor = GetBadgeColor(userModule);
        return $"margin-right: 10px; width: 60px; background-color: {badgeColor};";
    }

    private void NavigateToModule(string userModuleId)
    {
        NavigationManager.NavigateTo($"/ModuleDetails/{userModuleId}");
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }

    private string GetStateClass(UserModuleState state) => state switch
    {
        UserModuleState.NotStarted => "state-niet-gestart",
        UserModuleState.InProgress => "state-in-uitvoering",
        UserModuleState.Done => "state-voltooid",
        _ => ""
    };

    private string GetStateText(UserModuleState state) => state switch
    {
        UserModuleState.NotStarted => "Niet Gestart",
        UserModuleState.InProgress => "In Uitvoering",
        UserModuleState.Done => "Voltooid",
        _ => ""
    };
}